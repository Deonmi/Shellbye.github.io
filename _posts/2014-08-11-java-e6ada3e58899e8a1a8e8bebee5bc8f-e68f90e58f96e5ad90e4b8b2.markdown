---
author: shellbye
comments: true
date: 2014-08-11 09:51:00+00:00
layout: post
slug: java-%e6%ad%a3%e5%88%99%e8%a1%a8%e8%be%be%e5%bc%8f-%e6%8f%90%e5%8f%96%e5%ad%90%e4%b8%b2
title: Java 正则表达式 提取子串
wordpress_id: 1007
categories:
- 技术世界
---

假设现在有这样一个字符串：

{% highlight java %}
String s = "PositionCheck.asp?PositionExtID=CC637609929J90250014000&Version=1";
{% endhighlight %}

然后现在你想要PositionExtID的值，即CC637609929J90250014000，有以下两种方法：

1.String substring()

{% highlight java %}
import java.util.regex.Matcher;
import java.util.regex.Pattern;

/**
 * User: shellbye.com@gmail.com
 */
public class RegexMain {
    public static void main(String[] arg){
        String s = "PositionCheck.asp?PositionExtID=CC637609929J90250014000&Version=1";
        System.out.println(s.substring(s.indexOf("=") + 1, s.indexOf("&")));
        //output：
        //CC637609929J90250014000
    }
}
{% endhighlight %}

2.正则表达式
正则表达式不是万能的，而且很多时候也不是最佳选择。我最初就是用正则表达式解决这个问题的，但是下面的代码却达不到效果：

{% highlight java %}
import java.util.regex.Matcher;
import java.util.regex.Pattern;

/**
 * User: shellbye.com@gmail.com
 */
public class RegexMain {
    public static void main(String[] arg){
        String s = "PositionCheck.asp?PositionExtID=CC637609929J90250014000&Version=1";
        Pattern pattern = Pattern.compile("PositionExtID=(.*)&");
        Matcher matcher = pattern.matcher(s);
        System.out.println(matcher.group());
        //output：
        //PositionExtID=CC637609929J90250014000&
    }
}
{% endhighlight %}

这里是因为matcher.group()默认是group(0)，参考[这里](http://stackoverflow.com/questions/17969436/java-regex-capturing-groups#answer-17969618)也就是符合正则的整个字符串，而matcher.group(1)才是我们需要的值CC637609929J90250014000，所以上面的代码改过之后就对了：

{% highlight java %}
import java.util.regex.Matcher;
import java.util.regex.Pattern;

/**
 * User: shellbye.com@gmail.com
 */
public class RegexMain {
    public static void main(String[] arg){
        String s = "PositionCheck.asp?PositionExtID=CC637609929J90250014000&Version=1";
        Pattern pattern = Pattern.compile("PositionExtID=(.*)&");
        Matcher matcher = pattern.matcher(s);
        System.out.println(matcher.group(1));
        //output：
        //CC637609929J90250014000
    }
}
{% endhighlight %}

