<?xml version="1.0" encoding="UTF-8"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>六系小白</title>
    <description></description>
    <link>/</link>
    <atom:link href="/feed.xml" rel="self" type="application/rss+xml" />
    <pubDate>Thu, 16 Jun 2016 14:43:34 +0800</pubDate>
    <lastBuildDate>Thu, 16 Jun 2016 14:43:34 +0800</lastBuildDate>
    <generator>Jekyll v2.4.0</generator>
    
      <item>
        <title>python mysqldb的一个importerror</title>
        <description>&lt;p&gt;这次的这个问题有点离奇，程序前几天还正常运行，也正常演示了，
准备收拾行李回学校参加论文答辩前一天晚上，
最后运行了一个读取mysql的python脚本，居然发生如下报错信息：&lt;/p&gt;

&lt;p&gt;ImportError: libmysqlclient.so.18: cannot open shared object file: No such file or directory&lt;/p&gt;

&lt;p&gt;没有新安装啥软件，也没有任何其他相关操作，
服务器只是作为爬虫静静的爬了一晚上的数据，第二天就冒出个这么个错误，
而且是在我准备回学校前一天，简直是醉了，折腾了好久，都没解决，
于是根据历史经验“睡一觉第二天就解决了”，我就回去了，在当天晚上飞机的情况下，
来公司，居然真给解决了，当然，不同的情况解决方法可能不太一样，
我在网上找资料时，主要有以下几种解决方案，我都罗列下，说不定有帮助。&lt;/p&gt;

&lt;h3 id=&quot;ldlibrarypath&quot;&gt;1.设置LD_LIBRARY_PATH&lt;/h3&gt;
&lt;p&gt;这可能是比较简单的一种情况，也是&lt;a href=&quot;http://mysql-python.sourceforge.net/FAQ.html#importerror&quot; target=&quot;_blank&quot;&gt;MySQL&lt;/a&gt;官方有记录的一种解决方案，
具体做法就是设置LD_LIBRARY_PATH，将其设置为mysql的库&lt;/p&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-bash&quot; data-lang=&quot;bash&quot;&gt;&lt;span class=&quot;c&quot;&gt;# 注意因为我不是这种情况，所以不保证管用，只是有这么一些解决方法&lt;/span&gt;
&lt;span class=&quot;nb&quot;&gt;export &lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;LD_LIBRARY_PATH&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;/usr/lib/mysql
&lt;span class=&quot;nb&quot;&gt;export &lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;LD_LIBRARY_PATH&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;/usr/lib64/mysql &lt;span class=&quot;c&quot;&gt;#64bit&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;h3 id=&quot;ldd&quot;&gt;2.使用ldd命令&lt;/h3&gt;
&lt;p&gt;这是我没用过的命令，不过有资料里确实是提到了这个命令解决相关问题的场景，
所有有同样的问题的人可以试试，比如&lt;a href=&quot;http://stackoverflow.com/questions/511011/how-can-i-tell-python-which-version-of-libmysqlclient-so-to-use&quot; target=&quot;_blank&quot;&gt;SO&lt;/a&gt;.&lt;/p&gt;

&lt;h3 id=&quot;section&quot;&gt;3.使用链接&lt;/h3&gt;
&lt;p&gt;这个方法大部分都是中文资料里提到的，就是先找到具体的文件位置，
比如本文中的&lt;code&gt;libmysqlclient.so.18&lt;/code&gt;,&lt;/p&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-bash&quot; data-lang=&quot;bash&quot;&gt;&lt;span class=&quot;c&quot;&gt;# 注意因为我不是这种情况，所以不保证管用，只是有这么一些解决方法&lt;/span&gt;
find / -name libmysqlclient.so.18&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;然后在将找到的文件链接到其他的库里，具体可以参考&lt;a href=&quot;http://www.qttc.net/201404430.html&quot; target=&quot;_blank&quot;&gt;这篇文章&lt;/a&gt;和&lt;a href=&quot;http://hzcsky.blog.51cto.com/1560073/891002&quot;&gt;这篇&lt;/a&gt; {:target=”_blank”} &lt;/p&gt;

&lt;h3 id=&quot;section-1&quot;&gt;4.我的方法&lt;/h3&gt;
&lt;p&gt;如果你没有找到文件，那么上面的所有方法都没用，因为你的服务器上根本没有，
这个时候就要考虑去下载一个了，因为我用的centos（爱不起来），我就先用这个命令搜了下哪里有需要的文件：&lt;/p&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-bash&quot; data-lang=&quot;bash&quot;&gt;&lt;span class=&quot;c&quot;&gt;# 解决了我的问题&lt;/span&gt;

yum whatprovides */libmysqlclient.so.18&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;然后从输出的列表里，找了一个包安装，问题解决了&lt;/p&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-bash&quot; data-lang=&quot;bash&quot;&gt;&lt;span class=&quot;c&quot;&gt;# 别的其他包应该也可以，我只是随便选了包含libmysqlclient.so.18的&lt;/span&gt;

yum install mariadb-libs-5.5.44-2.el7.centos.x86_64&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

</description>
        <pubDate>Sat, 07 May 2016 18:27:08 +0800</pubDate>
        <link>/blog/tech_world/ImportError-libmysqlclient.so.18/</link>
        <guid isPermaLink="true">/blog/tech_world/ImportError-libmysqlclient.so.18/</guid>
        
        <category>spark</category>
        
        <category>docker</category>
        
        
        <category>tech_world</category>
        
      </item>
    
      <item>
        <title>Spark bug导致的错误信息记录</title>
        <description>&lt;p&gt;这次不能怪&lt;a href=&quot;http://spark.apache.org/examples.html&quot; target=&quot;_blank&quot;&gt;官方文档&lt;/a&gt;了，因为这次的问题也怪我，
在按照上面的例子运行Python版的Text Search时，一直有问题，
在经过排除各种不可能之后，最后锁定在了下面的这个报错信息：&lt;/p&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-bash&quot; data-lang=&quot;bash&quot;&gt;Traceback &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;most recent call last&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;:
  File &lt;span class=&quot;s2&quot;&gt;&amp;quot;&amp;lt;stdin&amp;gt;&amp;quot;&lt;/span&gt;, line 1, in &amp;lt;module&amp;gt;
  File &lt;span class=&quot;s2&quot;&gt;&amp;quot;/Users/jzhang/github/spark/python/pyspark/sql/context.py&amp;quot;&lt;/span&gt;, line 430, in createDataFrame
    &lt;span class=&quot;nv&quot;&gt;jdf&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; self._ssql_ctx.applySchemaToPythonRDD&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;jrdd.rdd&lt;span class=&quot;o&quot;&gt;()&lt;/span&gt;, schema.json&lt;span class=&quot;o&quot;&gt;())&lt;/span&gt;
  File &lt;span class=&quot;s2&quot;&gt;&amp;quot;/Users/jzhang/github/spark/python/pyspark/sql/context.py&amp;quot;&lt;/span&gt;, line 691, in _ssql_ctx
    &lt;span class=&quot;s2&quot;&gt;&amp;quot;build/sbt assembly&amp;quot;&lt;/span&gt;, e&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;
Exception: &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&amp;quot;You must build Spark with Hive. Export &amp;#39;SPARK_HIVE=true&amp;#39; and run build/sbt assembly&amp;quot;&lt;/span&gt;, Py4JJavaError&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;u&lt;span class=&quot;s1&quot;&gt;&amp;#39;An error occurred while calling None.org.apache.spark.sql.hive.HiveContext.\n&amp;#39;&lt;/span&gt;, JavaObject &lt;span class=&quot;nv&quot;&gt;id&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;o34&lt;span class=&quot;o&quot;&gt;))&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;虽然是一个很明确的错误，但是在网上找了好久都没解决，最后居然发现是spark1.6.0的一个&lt;a href=&quot;https://issues.apache.org/jira/browse/SPARK-12120&quot; target=&quot;_blank&quot;&gt;bug&lt;/a&gt;，
更新到1.6.1就没这个问题了，我也是醉了，唉，还是要记得多多保持软件的更新啊！！！&lt;/p&gt;

</description>
        <pubDate>Tue, 12 Apr 2016 18:27:08 +0800</pubDate>
        <link>/blog/tech_world/spark-bug-lead-to-error-note/</link>
        <guid isPermaLink="true">/blog/tech_world/spark-bug-lead-to-error-note/</guid>
        
        <category>spark</category>
        
        
        <category>tech_world</category>
        
      </item>
    
      <item>
        <title>Spark network workcount</title>
        <description>&lt;p&gt;不得不先吐槽下spark的&lt;a href=&quot;http://spark.apache.org/docs/latest/streaming-programming-guide.html&quot; target=&quot;_blank&quot;&gt;官方文档&lt;/a&gt;，很多东西说的不是清楚，
也没有把一些容易出错的地方提前告知，让我这种入门级的菜鸟踩了不少坑，
要不是工作需要，按照我往常“试一试”的心态，说不定早就放弃掉了。&lt;/p&gt;

&lt;p&gt;在&lt;a href=&quot;/blog/tech_world/spark-docker-mac/&quot; target=&quot;_blank&quot;&gt;上一篇&lt;/a&gt;博客中，我记录了在Mac上结合Docker来使用Spark的一些笔记，
本文主要记录在具体使用Spark Streaming的过程中，在练习官方示例时遇到的一些问题及其解决方案。&lt;/p&gt;

&lt;p&gt;官方文档在介绍Streaming时，用到了一个简单的&lt;a href=&quot;http://spark.apache.org/docs/latest/streaming-programming-guide.html#a-quick-example&quot; target=&quot;_blank&quot;&gt;例子&lt;/a&gt;,
在对代码进行了简单的讲解之后，官网的演示方法是这样描述的：&lt;/p&gt;

&lt;p&gt;1.在一个中断中输入&lt;code&gt;nc -lk 9999&lt;/code&gt;，这里是用来模拟9999端口的输入；&lt;br /&gt;
2.然后在另一个终端中，输入&lt;code&gt;./bin/spark-submit examples/src/main/python/streaming/network_wordcount.py localhost 9999&lt;/code&gt;，&lt;/p&gt;

&lt;p&gt;到这里，就应该可以正常使用了，然后一切并没有那么简单，
首先，如果你像我一样，并没有严格按照上面的顺序操作，那么，当你先进行了操作2的时候，
你会迎来如下错误：&lt;/p&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-bash&quot; data-lang=&quot;bash&quot;&gt;ERROR ReceiverTracker: Deregistered receiver &lt;span class=&quot;k&quot;&gt;for&lt;/span&gt; stream 0: Restarting receiver with delay 2000ms: Error connecting to localhost:9999 - java.net.ConnectException: Connection refused&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;这个“问题”我也在网上搜了好久，最后在&lt;a href=&quot;http://bit1129.iteye.com/blog/2174751&quot; target=&quot;_blank&quot;&gt;这篇博客&lt;/a&gt;里找到原因，那就是打开的顺序也很重要，
不过这个问题随着你按照操作1进行操作，那么这个问题也就不是问题了。&lt;/p&gt;

&lt;p&gt;接下来的问题是，即使当你按照上面的顺序进行了所有操作之后，依然没法按照预期看到输出，而是：&lt;/p&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-bash&quot; data-lang=&quot;bash&quot;&gt;WARN BlockManager: Block input-0-1460374276000 replicated to only &lt;span class=&quot;m&quot;&gt;0&lt;/span&gt; peer&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;s&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; instead of &lt;span class=&quot;m&quot;&gt;1&lt;/span&gt; peers&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;看到居然不是ERROR，顿时也算是轻松了许多，在万能的[SO]上还是轻松找到了&lt;a href=&quot;http://stackoverflow.com/questions/28050262/spark-streaming-network-wordcount-py-does-not-print-result&quot; target=&quot;_blank&quot;&gt;答案&lt;/a&gt;，
原来是因为在本地模式运行Spark Streaming时，如果使用了&lt;code&gt;local&lt;/code&gt;或者&lt;code&gt;local[1]&lt;/code&gt;这种模式，
那么就只有一个线程在运行了，所以就没有多余的线程来打印了！官方说法见&lt;a href=&quot;http://spark.apache.org/docs/latest/streaming-programming-guide.html#points-to-remember-1&quot;&gt;这里&lt;/a&gt;。&lt;/p&gt;

&lt;p&gt;折腾了好久，终于见到期待的输出了！如下：&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/spark-stream-suc.png&quot; alt=&quot;spark-stream-suc&quot; /&gt;  &lt;/p&gt;

</description>
        <pubDate>Mon, 11 Apr 2016 18:27:08 +0800</pubDate>
        <link>/blog/tech_world/spark-network-wordcount-example-note/</link>
        <guid isPermaLink="true">/blog/tech_world/spark-network-wordcount-example-note/</guid>
        
        <category>spark</category>
        
        <category>docker</category>
        
        
        <category>tech_world</category>
        
      </item>
    
      <item>
        <title>Use Spark in Docker on Mac</title>
        <description>&lt;p&gt;在Mac上安装Docker的过程是比较简单的，有详细的&lt;a href=&quot;https://docs.docker.com/engine/installation/mac/&quot; target=&quot;_blank&quot;&gt;官方文档&lt;/a&gt;介绍，
本文主要记录我在Docker中使用Spark的一些笔记。&lt;/p&gt;

&lt;h2 id=&quot;docker-spark&quot;&gt;1.下载docker-spark&lt;/h2&gt;
&lt;p&gt;我们需要的docker文件一般都是在&lt;a href=&quot;https://hub.docker.com/&quot; target=&quot;_blank&quot;&gt;Docker Hub&lt;/a&gt;上，它类似Github，
只是上面存放的都是一些docker文件。我们需要的是sequenceiq/spark这个库，
具体的下载命令类似git，是
&lt;code&gt;docker pull sequenceiq/spark:1.6.0&lt;/code&gt;，
接下来就是困扰了我很久的地方了，在这个库的&lt;a href=&quot;https://hub.docker.com/r/sequenceiq/spark/&quot; target=&quot;_blank&quot;&gt;文档&lt;/a&gt;中，
接下来就是用
&lt;code&gt;docker build --rm -t sequenceiq/spark:1.6.0 .&lt;/code&gt;来build了，
可是我尝试了很多次，每次都会报错
&lt;code&gt;unable to prepare context: unable to evaluate symlinks in Dockerfile path:
lstat /Users/username/Dockerfile: no such file or directory&lt;/code&gt;，
在网上找了很久也一直没有解决这个问题，直到搜到了作者的一个更老的版本的&lt;a href=&quot;http://blog.sequenceiq.com/blog/2015/01/09/spark-1-2-0-docker/&quot; target=&quot;_blank&quot;&gt;博客&lt;/a&gt;，
里面关于build是这样说的，&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;Alternatively you can always build your own container based on our Dockerfile.  &lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;Alternatively！！！这不是坑爹嘛！！！为啥在1.6里面就没有这个关键的字眼了呢！
尤其是对我这种docker新手来说！！！不过话说回来，
主要也是我没理解了docker build的&lt;a href=&quot;https://docs.docker.com/engine/reference/commandline/build/&quot; target=&quot;_blank&quot;&gt;含义&lt;/a&gt;：&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;Build a new image from the source code at PATH.  &lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;Build是用来依据Dockerfile重新创建一个image的，而我们其实在第一步的pull中就已经获得了一个image，
可以通过命令&lt;code&gt;docker images&lt;/code&gt;来查看你已经有的images。&lt;/p&gt;

&lt;h2 id=&quot;docker-spark-1&quot;&gt;2.启动docker-spark&lt;/h2&gt;
&lt;p&gt;当通过pull获得了image或者通过build得到了image之后，接下来就可以启动了，
&lt;code&gt;docker run -it -p 4040:4040 -h sandbox sequenceiq/spark:1.6.0 bash&lt;/code&gt;&lt;br /&gt;
具体的run命令的各个参数，可以参考&lt;a href=&quot;https://docs.docker.com/engine/reference/run/&quot;&gt;具体的文档&lt;/a&gt;。
这个时候，你就已经进入了包含了spark的一个bash环境，然后就可以使用spark了。&lt;/p&gt;

&lt;p&gt;理论上讲到这里就应该结束了，但是并不能，因为我在实际操作时发展，每次我在spark里做的改动，
当我下一次重新用上面的命令启动时，全部都丢失了，又一次需要重新开始。
在&lt;a href=&quot;http://stackoverflow.com/questions/19585028/i-lose-my-data-when-the-container-exits&quot; target=&quot;_blank&quot;&gt;SO&lt;/a&gt;上找到这个问答，
才明白原来run命令运行一次就可以了，run命令其实是启动了一个container，每次run的时候，
都是重新启动一个全新的container，所以如果要接着上次的工作进行的话，可以使用
&lt;code&gt;docker attach f357e2faab77&lt;/code&gt;(注意最后一个是container的id，用&lt;code&gt;docker ps -a&lt;/code&gt;可以查看)。&lt;/p&gt;

&lt;p&gt;好了，这样的话一个基本的使用场景就搞定了，以后如果有新的发现再来记录。  &lt;/p&gt;

</description>
        <pubDate>Sat, 09 Apr 2016 18:27:08 +0800</pubDate>
        <link>/blog/tech_world/spark-docker-mac/</link>
        <guid isPermaLink="true">/blog/tech_world/spark-docker-mac/</guid>
        
        <category>spark</category>
        
        <category>docker</category>
        
        
        <category>tech_world</category>
        
      </item>
    
      <item>
        <title>重拾数学1－箱线图</title>
        <description>&lt;p&gt;来到&lt;a href=&quot;http://100tal.com/&quot; target=&quot;_blank&quot;&gt;新公司&lt;/a&gt;实习之后，发现我将要做的工作是我一直以来期待的关于机器学习和人工智能的东西，
兴奋至于也终于意识到不得不好好补补自己的数学了，于是打算写一个重拾数学的学习笔记，
尽量做到每天一篇，看看能坚持多久吧。&lt;/p&gt;

&lt;p&gt;首先是在&lt;a href=&quot;https://www.khanacademy.org/math/probability&quot; target=&quot;_blank&quot;&gt;KHanACADEMY&lt;/a&gt;上遇到的第一个问题，就是&lt;a href=&quot;http://www.physics.csbsju.edu/stats/box2.html&quot; target=&quot;_blank&quot;&gt;box plot&lt;/a&gt;, &lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;The box plot (a.k.a. box and whisker diagram) is a standardized way of displaying the 
distribution of data based on the five number summary: 
minimum, first quartile, median, third quartile, and maximum.  &lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;Box plot中文应该是叫箱线图，主要用来以较少的数据直观的描述数据集的分布情况，其主要用的值有最小值、
中位数、最大值、第一四分位数和第三四分位数等。&lt;/p&gt;

&lt;p&gt;举例：&lt;br /&gt;
请给出一下有序数列的box plot图，4，5，7，7，7，8，10，11，11，13，13，14.&lt;/p&gt;

&lt;p&gt;解：&lt;br /&gt;
首先需要找到的五个点以及其对应的寻找方法如下：&lt;br /&gt;
1. 最大值：数列中的最大值&lt;br /&gt;
2. 最小值：数列中的最小值&lt;br /&gt;
3. 中位数：如果数列中数的个数为奇数，则直接取数列长度除以2向上取整的位置所在的数
（如10，20，30，40，50中，数列长度为5，5/2向上取整为3，所以，中位数为位于第三个位置的数30）；
如果数列中数的个数为偶数，则取数列长度除以2的位置的数，以及其后面的数，在本例中，即第六和第七位数，
分别为8和10，然后在求二者的平均数，本例中即为9，所以本例中的数列的中位数即为9.&lt;br /&gt;
4. 第一四分位数：如果数列中数的个数为奇数，则第一四分位数为去掉中位数之后前面剩余的数所组成的数列的中位数，
如果数列中数的个数为偶数，则第一四分位数为前面一半的数所组成的数列的中位数。&lt;br /&gt;
5. 第三四分位数：如果数列中数的个数为奇数，则第三四分位数为去掉中位数之后后面剩余的数所组成的数列的中位数，
如果数列中数的个数为偶数，则第三四分位数为后面一半的数所组成的数列的中位数。  &lt;/p&gt;

&lt;p&gt;找到以上所需的五个数之后，接下来就是要在数轴上画图的过程了，每个点具体的画法如下所示：&lt;br /&gt;
&lt;img src=&quot;http://www.physics.csbsju.edu/stats/simple.box.defs.gif&quot; alt=&quot;simple.box.defs&quot; /&gt;  &lt;/p&gt;

&lt;p&gt;其中的第一四分位数到第三四分位数之间的长方形叫做interquartile range（IQR），IQR内部的线为中位数，
IQR外面一上一下两条短线表示最大与最小值。&lt;/p&gt;

&lt;p&gt;本例中最终的作图结果如下图：&lt;br /&gt;
&lt;img src=&quot;/assets/box-plot1.png&quot; alt=&quot;box plot&quot; /&gt;  &lt;/p&gt;

&lt;p&gt;参考：&lt;br /&gt;
&lt;a href=&quot;http://www.physics.csbsju.edu/stats/box2.html&quot; target=&quot;_blank&quot;&gt;1.Box Plot: Display of Distribution&lt;/a&gt;&lt;br /&gt;
&lt;a href=&quot;https://en.wikipedia.org/wiki/Box_plot&quot; target=&quot;_blank&quot;&gt;2.Box plot - Wikipedia, the free encyclopedia&lt;/a&gt;&lt;br /&gt;
&lt;a href=&quot;http://www.gdstats.gov.cn/tjkw/tjyyc/2003/2003/2/0013.htm&quot; target=&quot;_blank&quot;&gt;3.BOX PLOT–描述统计的一个简便工具&lt;/a&gt;  &lt;/p&gt;

</description>
        <pubDate>Fri, 08 Apr 2016 18:27:08 +0800</pubDate>
        <link>/blog/tech_world/Pick-up-Math-1-box-plot/</link>
        <guid isPermaLink="true">/blog/tech_world/Pick-up-Math-1-box-plot/</guid>
        
        <category>math</category>
        
        <category>Probability and statistics</category>
        
        
        <category>tech_world</category>
        
      </item>
    
      <item>
        <title>Django Pagination note</title>
        <description>&lt;p&gt;在&lt;code&gt;ListView&lt;/code&gt;中使用了&lt;code&gt;paginate_by&lt;/code&gt;之后，
并在&lt;code&gt;template&lt;/code&gt;中使用了&lt;code&gt;object_list.first&lt;/code&gt;这样的变量时，
Django抛出了如下错误：&lt;/p&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-bash&quot; data-lang=&quot;bash&quot;&gt;Cannot reorder a query once a slice has been taken.&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;在&lt;a href=&quot;/blog/tech_world/Django-ListView-advance/&quot; target=&quot;_blank&quot;&gt;Advanced Django ListView&lt;/a&gt;中，我也提到过同样的问题，
但是两者的原因是不一样的。
上一次的错误是&lt;code&gt;AssertionError at Cannot filter a query once a slice has been taken&lt;/code&gt;，
即一旦分片之后，因为SQL已经执行了所以没法再去&lt;code&gt;filter&lt;/code&gt;，
而这一次的问题是不能再排序（&lt;code&gt;reorder&lt;/code&gt;），之所以说是再排序，
是因为在分页的时候，Django已经进行了一次&lt;a href=&quot;https://docs.djangoproject.com/en/1.9/ref/models/querysets/#order-by&quot; target=&quot;_blank&quot;&gt;排序&lt;/a&gt;，
这次排序中，如果在&lt;code&gt;model&lt;/code&gt;中没有指定排序的方式（&lt;code&gt;ordering&lt;/code&gt;），
那么就会默认使用其主键（默认为&lt;code&gt;id&lt;/code&gt;）。
那么第二次排序发生在哪里呢？发生在调用&lt;code&gt;object_list.first&lt;/code&gt;时，
看&lt;a href=&quot;https://github.com/django/django/blob/master/django/db/models/query.py#L544&quot; target=&quot;_blank&quot;&gt;源码&lt;/a&gt;可以发现，first并不是简单的取了当前&lt;code&gt;queryset&lt;/code&gt;的第一个，
而是又一个判断的过程，判断它是否已经排序，若已经排序，则取第一个，
否则按照主键排序再取第一个，这就是第二次排序发生的地方，
究其原因，是因为我在&lt;code&gt;model&lt;/code&gt;的定义中没有在&lt;code&gt;Meta&lt;/code&gt;中指定排序字段，
即&lt;code&gt;ordering&lt;/code&gt;.如果指定了该字段，则可以避免上面的问题。&lt;/p&gt;

&lt;p&gt;在找资料的过程中，我发现了一种可以避免第二次排序的方式，
就是不用&lt;code&gt;object_list.first&lt;/code&gt;这样的形式，而用&lt;code&gt;object_list.0&lt;/code&gt;，
这个就不管顺序了，直接取出目前最前面那个，这样同样也不会出现第二次排序，
也不会报错了。&lt;/p&gt;

</description>
        <pubDate>Thu, 07 Jan 2016 19:27:08 +0800</pubDate>
        <link>/blog/tech_world/Django-ListView-note/</link>
        <guid isPermaLink="true">/blog/tech_world/Django-ListView-note/</guid>
        
        <category>Django</category>
        
        
        <category>tech_world</category>
        
      </item>
    
      <item>
        <title>2015年终总结</title>
        <description>&lt;p&gt;去了一趟西安，再回来成都时，2016都已经到了第四天了，本来打算年前动笔的年终总结也拖到了年后，好在不晚，
现在写，既是总结，也是计划了。&lt;/p&gt;

&lt;p&gt;2015年可以说是我的旅行元年了，跨年时我是在重庆，第一次真正意义上的旅行，除了生我养我的包头，
已经不知不觉待了近七年的成都，这是第一次到达另一座城市，短短三天时光，
我和我女朋友用最快的速度、最详细周密的计划，游玩了重庆的大部分景点，
去了“原来这么小的”解放碑，第一次真正的坐船，第一次坐滑索，坐了菜园坝火车站超长的扶梯，
说起这个扶梯，我至今印象深刻，因为它长的让我害怕，也去了“类似锦里”的磁器口，
买了一百块的大名鼎鼎的陈麻花却都拉在了动车上，被返程的动车又拉回了重庆。
中途还去了一趟武隆，只去看了天坑，没有去地缝，和那里的变形金刚合了影，
又做了几十米高的两层电梯，也拍了几十张后来从来没看过的芙蓉洞。&lt;/p&gt;

&lt;p&gt;说2015是旅行元年不仅仅因为这一年我第一次旅行，而是因为这一年去过的地方太多了。
虽然这一年前半年忙于找工作，后半年忙于写论文，但是依旧走了不少地方，
对于刚开始旅行的人而言，这个开头开的真的有点大了。&lt;/p&gt;

&lt;p&gt;年后回来成都就开始找实习了，因为经历过本科那次噩梦般的求职经历，
所以我对于找工作一直是有一定的畏惧心理的，直到我五月从女朋友家回来之后，
通过霸面拿到阿里巴巴的实习offer之后，我才算是能把心放在肚子里了。
在三四月份，先后两次电话面试都因为各种原因挂掉了，当然主要还是我准备不够充分，
以为自己有一定的经验，就可以“裸面”，事实是面试官问的那些一个个看起来很简单的问题，
却总说不到点子上，回过头来想想，现在让我去面试当时的我，我估计我也不一定能坚持面自己超过八分钟。&lt;/p&gt;

&lt;p&gt;六月去杭州是一个如我期待的那样的转折点，其功能类似读研之于我一样，
在很大程度上给我提供了一个足够缓冲并提高的时间，让我得以脱胎换骨。
收获不仅仅是技术上的，更多的其实是视野上的。当然，这个说的并不是西湖的那个午后，
而是独立生活这种全新的命题以及随之而来的一系列故事，
我终于深刻理解了《功夫》里的“房东”这个概念，因为一直以来不是在自己家，
就是在学校宿舍，还真是一直没有自己找房子租房子过，没有那种寄人篱下的无奈感。
也就是在这个时候，我才明白了之前流行过好一阵子的“安全感”的意思。
/* 契约精神的缺乏，以及资源的稀少，让很多人一直小心谨慎的活着，
对于很多人来说，一个稳定的合法的，在自己名下的房子，才能真正防止自己流落街头。
国人对漂泊一直心怀抵触，总喜欢稳稳当当，所以当大家有了钱之后，很多人的想法都是置地买房，
有时候想想真是觉得可悲，同一片蓝天下，还有那么多人在考虑如何活下去，
就像那个叙利亚的小男孩的一样，活着，竟成了是第一要务。不过，有了房子就真的安全了吗？
就在60多年前，不远，就60多年前，很多有房有地的人，就因为有房有地而被一群人杀掉，
房与地被瓜分，现在，60多年后，人还是那群人，你真的觉得你用尽一生的积蓄，
买了一片土地上空的某一层，能让你真正的安全？ */&lt;/p&gt;

&lt;p&gt;8月低回来时，我是有一种衣锦还乡的错觉的，不过这个错觉很快被中国互联网的所谓“寒冬”唤醒了，
于是又开始了一系列的求职(sheng)之路，混混沌沌一个月，各种电话面、视频面和现场面，
也经历一次传说中的群面，终于，一家我满意也满意我的公司给我发了offer，一切尘埃落定之后，
又一次前往新乡，说实话，这次再去女朋友家，明显就自我感觉好很多，毕竟有了着落，
对女朋友父母也好交代，他们的宝贝女儿，不会跟着我吃苦，我也是有能力创造一个美好未来，并支撑一个家的。&lt;/p&gt;

&lt;p&gt;古人有云，“福兮祸之所伏”（《老子》），太美好的时候，就要准备接受打击了，于是乎，
在我开始准备写论文时，我失去了我人生的第一份实习工作，从2013年3月份电子科大研究生录取分数线公布，
到我从这家公司离职，我在这个团队，在这个方向，也算是干了两年半了，我从这里起步开始写代码，
从PHP到Python，从Yii到Django，从WEB到爬虫，一路走来，故事不可谓不多，
从最初甚至萌生过自己不适合当程序员的想法，到最后自信满满的计划成为职业程序员，
从遇到问题就问师兄问师弟，到去stackoverlow.com去帮助别人，并成为Established User，
这是一个技术成长的过程，也是我不断认识自我，提升自我的过程，也是在这段时间里，
我遇到了我的女朋友，我把她也带入程序员的队伍中，并与她一起互相学习，共同成长，
最后被“青出于蓝”。就像我上面说的那样，这是我人生的一个转折点，如果没有这段经历，
也许我现在可能是TP－Link的年度销售冠军呢，谁知道呢，^_^&lt;/p&gt;

&lt;p&gt;当然，古人也有云，“祸兮福之所倚”（《老子》），失业后，又机缘巧合之下接到腾讯的产品电话面试，
并最后意外转入&lt;a href=&quot;/blog/tech_world/tecent_product_manager_interview_note/&quot;&gt;产品培训生&lt;/a&gt;面试环节，于是前后两次飞到深圳参加群面、HR面、业务面以及GM面，
并最后在经过一轮电话加面后成功拿到腾讯2016产品培训生offer，这无疑是对我在产品方向上的潜力的一个认同，
原来一直以来某些有眼光的人都是对的，我可能真的有做产品的潜力，但是经过慎重的考虑之后，
我还是决定要在技术的道路上发展，一来是因为我长久的职业规划和目前的职业积累都在技术领域，
短期内没有做产品的计划，二来也是因为我相比于腾讯，在好未来，我会拥有更好的未来，^_^&lt;/p&gt;

&lt;p&gt;2015的年末，正好利用失业的空隙，也开始练车了，目前为止一切顺利，科一已过，
希望能尽快拿到驾照，然后以后不想喝酒时就可以抱歉的说，“实在不好意思，今天是开车来的，不能喝酒”。&lt;/p&gt;

</description>
        <pubDate>Mon, 04 Jan 2016 19:27:08 +0800</pubDate>
        <link>/blog/tech_world/2015-summary/</link>
        <guid isPermaLink="true">/blog/tech_world/2015-summary/</guid>
        
        <category>life</category>
        
        
        <category>tech_world</category>
        
      </item>
    
      <item>
        <title>Advanced Django ListView</title>
        <description>&lt;p&gt;之前学习Djang时写过一个入门版本的关于ListView的&lt;a href=&quot;/blog/tech_world/django_ListView_DetailView_basic/&quot; target=&quot;_blank&quot;&gt;笔记&lt;/a&gt;，
但是其中的东西都笔记基础，没法进行高级的定制，所以有了这篇笔记，
纪录下自己最新的一些心得。&lt;/p&gt;

&lt;h3 id=&quot;section&quot;&gt;1.添加返回数据&lt;/h3&gt;

&lt;p&gt;接&lt;a href=&quot;/blog/tech_world/django_ListView_DetailView_basic/&quot; target=&quot;_blank&quot;&gt;上一篇&lt;/a&gt;笔记，假如现在你要在新闻的列表页中集中显示所有的新闻类别，
要怎么做呢？因为你把很多的逻辑都托管给Django了，所以这个时候，新添加的逻辑也是要依赖于Django的，
比如你要新添加的数据，就要用到&lt;a href=&quot;https://docs.djangoproject.com/en/1.9/ref/class-based-views/mixins-multiple-object/#django.views.generic.list.MultipleObjectMixin.get_context_data&quot; target=&quot;_blank&quot;&gt;&lt;code&gt;get_context_data&lt;/code&gt;&lt;/a&gt;这个函数了，
官网中关于&lt;code&gt;get_context_data&lt;/code&gt;的介绍是：&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;Returns context data for displaying the list of objects.  &lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;这是一个字典，其中默认已经包含了四个对象，一个是返回的对象列表和三个关于分页的对象。
现在我们要在其中添加东西，那就就自己实现一遍这个函数就可以了，代码如下：&lt;/p&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-python&quot; data-lang=&quot;python&quot;&gt;&lt;span class=&quot;k&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;get_context_data&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;bp&quot;&gt;self&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;**&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;kwargs&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;):&lt;/span&gt;
	&lt;span class=&quot;c&quot;&gt;# 先通过调用父类的方法获取到原始的context对象，其中包含上面提到的四个对象&lt;/span&gt;
	&lt;span class=&quot;n&quot;&gt;context&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;super&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;NewsList&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;bp&quot;&gt;self&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;get_context_data&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;**&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;kwargs&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
	&lt;span class=&quot;c&quot;&gt;# 在其中添加我们想要添加的对象，这样context就有五个对象了&lt;/span&gt;
	&lt;span class=&quot;n&quot;&gt;context&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&amp;#39;category_list&amp;#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;NewsCategory&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;objects&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;all&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt;
	&lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;context&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;然后在&lt;code&gt;templates&lt;/code&gt;中，我们就可以直接使用&lt;code&gt;category_list&lt;/code&gt;这个对象了，像这样：&lt;/p&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-python&quot; data-lang=&quot;python&quot;&gt;&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;%&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;for&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;c&lt;/span&gt; &lt;span class=&quot;ow&quot;&gt;in&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;category_list&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;%&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;{{&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;c&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;title&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;}}&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;%&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;endfor&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;%&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;h3 id=&quot;section-1&quot;&gt;2.自定义返回对象集&lt;/h3&gt;
&lt;p&gt;在&lt;a href=&quot;/blog/tech_world/django_ListView_DetailView_basic/&quot; target=&quot;_blank&quot;&gt;上一篇&lt;/a&gt;笔记中，我们是直接获取的所有的新闻，
现在假设我们要添加一个搜索功能，按照新闻标题进行搜索，然后只返回那些命中搜索的新闻，
这就需要过滤返回的结果集了，基于上面的内容，我们最容易想到的就是在&lt;code&gt;get_context_data&lt;/code&gt;中，
对其中的&lt;code&gt;object_list&lt;/code&gt;进行过滤，比如在&lt;code&gt;return&lt;/code&gt;语句前添加如下一行：&lt;/p&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-python&quot; data-lang=&quot;python&quot;&gt;&lt;span class=&quot;n&quot;&gt;context&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&amp;#39;news_list&amp;#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;context&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&amp;#39;news_list&amp;#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;filter&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;title__contains&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&amp;#39;search_text&amp;#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;这样的写法，当有分页功能时（大多数情况下是有的），就会出现如下错误：&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;AssertionError at Cannot filter a query once a slice has been taken.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;官网的解释在&lt;a href=&quot;https://docs.djangoproject.com/en/1.9/topics/db/queries/#limiting-querysets&quot;&gt;这里&lt;/a&gt;，说白了就是一旦分页了，也就是&lt;code&gt;slice&lt;/code&gt;了之后，这个查询就在数据库里执行过了，
所以这个时候就没法继续去&lt;code&gt;filter&lt;/code&gt;了。所以这并不是一个优雅的解决方案，优雅的方案是使用正确的函数，
这里正确的函数就是&lt;a href=&quot;https://docs.djangoproject.com/en/1.9/ref/class-based-views/mixins-multiple-object/#django.views.generic.list.MultipleObjectMixin.get_queryset&quot; target=&quot;_blank&quot;&gt;&lt;code&gt;get_queryset&lt;/code&gt;&lt;/a&gt;这个函数了，比如：&lt;/p&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-python&quot; data-lang=&quot;python&quot;&gt;&lt;span class=&quot;k&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;get_queryset&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;bp&quot;&gt;self&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;):&lt;/span&gt;
	&lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&amp;#39;q&amp;#39;&lt;/span&gt; &lt;span class=&quot;ow&quot;&gt;in&lt;/span&gt; &lt;span class=&quot;bp&quot;&gt;self&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;request&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;GET&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;
		&lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;News&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;objects&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;filter&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;title__contains&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;bp&quot;&gt;self&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;request&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;GET&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&amp;#39;q&amp;#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;])&lt;/span&gt;
	&lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;super&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;NewsList&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;bp&quot;&gt;self&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;get_queryset&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;了解一个框架的最佳方式就是要懂其常用函数的功能，那么写一个框架的最佳方式，
就是函数名一定要见名知意，不然找正确的函数就比较痛苦了。&lt;/p&gt;

</description>
        <pubDate>Tue, 29 Dec 2015 18:27:08 +0800</pubDate>
        <link>/blog/tech_world/Django-ListView-advance/</link>
        <guid isPermaLink="true">/blog/tech_world/Django-ListView-advance/</guid>
        
        <category>Django</category>
        
        
        <category>tech_world</category>
        
      </item>
    
      <item>
        <title>Pure js implements getJSON with X-Requested-With header</title>
        <description>&lt;p&gt;用纯js实现jquery里面的getJSON方法在网上是有比较多的资料的，
比如在&lt;a href=&quot;http://youmightnotneedjquery.com/#json&quot;&gt;You Might Not Need Jquery&lt;/a&gt;中，就有如下实现：&lt;/p&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-javascript&quot; data-lang=&quot;javascript&quot;&gt;&lt;span class=&quot;c1&quot;&gt;// jquery&lt;/span&gt;
&lt;span class=&quot;nx&quot;&gt;$&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;getJSON&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;&amp;#39;/my/url&amp;#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;function&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;data&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;

&lt;span class=&quot;p&quot;&gt;});&lt;/span&gt;

&lt;span class=&quot;c1&quot;&gt;// pure js&lt;/span&gt;
&lt;span class=&quot;kd&quot;&gt;var&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;request&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;XMLHttpRequest&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;();&lt;/span&gt;
&lt;span class=&quot;nx&quot;&gt;request&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;open&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;&amp;#39;GET&amp;#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;&amp;#39;/my/url&amp;#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;kc&quot;&gt;true&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;

&lt;span class=&quot;nx&quot;&gt;request&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;onload&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;function&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;status&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;gt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;200&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;amp;&amp;amp;&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;status&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;400&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;c1&quot;&gt;// Success!&lt;/span&gt;
    &lt;span class=&quot;kd&quot;&gt;var&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;data&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;JSON&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;parse&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;response&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
  &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;else&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;c1&quot;&gt;// We reached our target server, but it returned an error&lt;/span&gt;

  &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;};&lt;/span&gt;

&lt;span class=&quot;nx&quot;&gt;request&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;onerror&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;function&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;c1&quot;&gt;// There was a connection error of some sort&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;};&lt;/span&gt;

&lt;span class=&quot;nx&quot;&gt;request&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;send&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;();&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;但是我在用这段代码异步获取验证码图片时，其效果却和&lt;code&gt;getJSON&lt;/code&gt;不一样，
用后者时是可以正常返回结果的，但是用纯js时，后台却返回了404，
对比两次的HTTP请求之后，发现用纯js方法时构造的HTTP请求比用&lt;code&gt;getJSON&lt;/code&gt;少了一个Header，
就是&lt;code&gt;X-Requested-With&lt;/code&gt;，这是一个很重要的非标准Header，
&lt;a href=&quot;https://en.wikipedia.org/wiki/List_of_HTTP_header_fields#Common_non-standard_request_fields&quot;&gt;Wiki&lt;/a&gt;解释的比较清楚了，&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;mainly used to identify Ajax requests. 
Most JavaScript frameworks send this field with value of &lt;code&gt;XMLHttpRequest&lt;/code&gt;&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;也就是说这个Header是用来标记请求是否为&lt;code&gt;Ajax&lt;/code&gt;的，为什么要这样做呢？
为了防止跨站脚本攻击，也就是大名鼎鼎的&lt;code&gt;CSRF&lt;/code&gt;，那么既然如此，需要怎么做呢？
很简单，就是在上面的代码&lt;code&gt;open&lt;/code&gt;之后添加如下一行即可：&lt;/p&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-javascript&quot; data-lang=&quot;javascript&quot;&gt;&lt;span class=&quot;nx&quot;&gt;request&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;setRequestHeader&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&amp;quot;X-Requested-With&amp;quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&amp;quot;XMLHttpRequest&amp;quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

</description>
        <pubDate>Sun, 27 Dec 2015 19:27:08 +0800</pubDate>
        <link>/blog/tech_world/pure-js-implements-getJSON-with-header-X-Requested-With/</link>
        <guid isPermaLink="true">/blog/tech_world/pure-js-implements-getJSON-with-header-X-Requested-With/</guid>
        
        <category>javascript</category>
        
        <category>js</category>
        
        <category>jquery</category>
        
        <category>http</category>
        
        
        <category>tech_world</category>
        
      </item>
    
      <item>
        <title>腾讯产品培训生面试笔记</title>
        <description>&lt;p&gt;腾讯的产品经理在中国互联网界有口皆碑，这肯定不是巧合。
昨天刚收到补录的产培生offer，所以今天写下面试经验，
因为当初我准备的时候，没有太多详细的经验贴，
所以希望我可以说的详细点，以供后来人好好准备。&lt;/p&gt;

&lt;p&gt;首先是群面，我们当时是9个人，一组五人，一组四人，
群面的第一步就是一分钟的自我介绍，这里需要注意，
这个一分钟的自我介绍是有目的的，是命题作文，
不是自由发挥。一分钟内我们的目的是，
说清楚自己的基本信息（年龄，家乡，大学等），
然后简单介绍下自己的产品经历，自己的特点。
其实很简单，目标清楚了就比较容易准备。
这个时候要注意不要超时，这个不要超时不是说要计时一分钟，
而是不要没人喊停就一直说，点到为止就可以了，
说清楚上面的内容也基本上就一分钟差不多了，
超几秒应该没事，不过不同的面试官可能会不同。
所以观察面试官的反应也很重要，要先对基本的规则有个把握，
所以第一个作自我介绍有一定的风险，当然好处是一马当先。
自我介绍是不规定顺序的，谁想说谁说，但是基本上有自告奋勇的人之后，
大家都会挨个进行。&lt;/p&gt;

&lt;p&gt;第二步是一个互动过程。大家针对刚才的自我介绍进行互相的点评。
说一下经过一轮自我介绍，你都对哪些人有了深刻的印象，以及为什么。
这个时候，就是考验你刚才有没有认真听其他人的自我介绍的时候了，
正常听了大家的介绍之后，一定会对某些人有了一定的初步印象，
互相点评一下就好。这个环节如实陈述就好，一般给你留下比较好印象的在后面的表现也都会很好。&lt;/p&gt;

&lt;p&gt;第三步就是15分钟的讨论了，这就是真正的群面内容了，
讨论的过程一定要注意，不要说个不停，一定要给别人留下时间，
当然，遇到一直说不停的，你也要学会在他喘息之间打断他，
虽然我们正常说话都不会这样，但是这个时候这是一个很重要的技能，
虽然不说“商场如战场”这样的话，但是如果你不掌握一定的技能，
那么你可能真的会被淘汰，用后来我听到的一句HR回答求职者的“我为啥没过群面”的话来说，
就是“我对你没印象”。求职不是过家家，要认真对待。
那么，怎么科学的打断别人呢？首先你要注意听他的话，
群面大家都是现场准备，不会出现很完整的长篇大论，
所以你要在他逻辑的空档打断他，当然如果对方逻辑比较强，
没有空档，你就利用他咽口水或者呼吸的瞬间打断他就好了。
反过来，如果你被打断好几次了，那么你就要注意了，
是不是自己说的太多了，这个时候要把时间适度的让给别人，
15分钟其实是很足够的，基本上平均没人有三分钟的发言，
而且你要知道，不仅仅是说话，你的动作、表情等也都很重要。&lt;/p&gt;

&lt;p&gt;第四步就是总结，大家都普遍有个误区，就是认为群面一定要争取总结的资格。
我认为这个其实没那么重要，总结是有一定的好处，毕竟是一个单独的发言机会，
但是它也有一定的弊端，所谓“言多必失”，总结的人如果没有很好的总结，
一来对不起队友的幸苦讨论，二来容易暴露自己的一些不足，
所以我觉得没有必要在意总结的这个所谓机会，因为大多群面总结之后都会有队友补充，
这个时候你可以从容的站起来讲自己的观点，即可以吸收总结者的经验，
也可以发表自己独特的见解，相比总结，我觉得这个机会反而需要牢牢把握。&lt;/p&gt;

&lt;p&gt;这里我就要给好未来打个广告了，好未来的群面总结之后，会有一个challenge，
让别的组的人给你提问，对你们队的观点进行一些反驳，你们要做好防守准备，
回答别人的提问。腾讯的产培生群面中，没有这个环节，
我个人认为这个环节是很有必要的，因为压力之下的表现也是一个很重要的衡量指标。&lt;/p&gt;

&lt;p&gt;第五步又是一个互动的过程，这次是点评下对方在总结和补充方面的表现，
因为拿到的是同一个题目，所以大家的总结总有一些值得借鉴的地方，
我觉得这个时候一定要表现风度，不要攻击对方，说对方哪里不好，
我认为这个时候正是要表扬对方的时候，说一点对方的闪光点，
一些好的idea。&lt;/p&gt;

&lt;p&gt;就这样，群面就结束了，整体来说，我感觉不要表现太强的攻击性，
队内要和谐互助，团结一致，尽量在最后统一观点，不要出现太大的分歧，
否则我感觉会团灭，因为产品经历的协调能力很重要，如果一群产品经历都没法协调，
那怎么和设计、研发协调呢？&lt;/p&gt;

&lt;p&gt;群面过了之后，就是专业初面。面试官一般都会需要你进行一点简单的自我介绍，
这个时候就没有太多经验了，因为不同的人问到的问题都是不一样的，主要是根据个人经历。
需要注意的是，一定不要掉入压力面的陷阱，面试官有时候可能会估计刁难下你，
这个时候一定不能乱了阵脚，不要被面试官引入歧途，急着和他较真。
你的目的是向他展示你自己，而不是说服他，你要按照自己的思路来讲自己的经历。
比如他问你，这个产品你当时为什么不这样处理呢？这样处理岂不是更好？
你就简单的说，“这个注意确实比较好，当时确实没有想到，如果这样处理说不定真的会很好”，
千万不要反驳、解释。你简单说完这些之后，要继续你的思路。&lt;/p&gt;

&lt;p&gt;专业初面之后，就是HR面了，这个我感觉在产品经理这个职业内应该不会是问题，
做技术有比较担心HR面的，不过一般都没啥大问题，当然，聊的比较好的话，
肯定是有加分的。我觉得这个时候就要突出故事性，什么叫故事性呢？
就是你不能和HR说我是个乐观的人，你要和HR说，有一次，发生了什么什么事情，
大家都觉得完蛋了，但是我觉得凡事都有好的一面，我就安慰大家没事的，然后又怎么怎么样，
后来大家就都没事了。看到没，这才叫乐观。&lt;/p&gt;

&lt;p&gt;专业初面之后，就是传说中的GM面，为啥是传说中的呢？因为据说GM都是很牛逼的人物，
都是能在互联网上找到新闻的人物，事实证明确实是这样。基本上走到这一步，
从专业角度说明你已经是一个合格的产品经历了，那么能不能进入产培呢？
这个就真的是“功夫在诗外”了，平时要多积累，并不是说要多研究APP，
而是真的要读读诗，看看画，旅旅游，尽量能够使自己能从多个角度考虑问题，
而不张口用户体验，闭口用户需求，做产品，其实是很难的，当然我说的是好产品。&lt;/p&gt;

&lt;p&gt;不知道为啥我和另一个同学又加了一个电话的“final final interview”，有两个问题，
我觉得不错，就和大家分享下。第一个是介绍下你自己在产品角度的独特之处，
是啊，你已经是一个合格的产品经历了，那么，那么多的产品经历中，你有啥独特之处呢？
这个问题挺好，大家可以平日里多想想，哈哈。第二个就是从你的项目中，找出一个来，
假设面试官是投资人，你现在有三分钟时间，来“骗点钱”（面试官原话），这个问题就更好了，
它让你能在一个较高的纬度思考自己的产品，培养自己的大局观。&lt;/p&gt;

&lt;p&gt;嗯，以上就是整个腾讯产品培训生的全部经验了。希望可以给看到的同学一点点启发。&lt;/p&gt;

</description>
        <pubDate>Tue, 15 Dec 2015 00:00:00 +0800</pubDate>
        <link>/blog/tech_world/tecent_product_manager_interview_note/</link>
        <guid isPermaLink="true">/blog/tech_world/tecent_product_manager_interview_note/</guid>
        
        <category>产品</category>
        
        
        <category>tech_world</category>
        
      </item>
    
  </channel>
</rss>
