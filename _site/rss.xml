<?xml version="1.0" encoding="UTF-8" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
<channel>
        <title>六系小白</title>
        <description>六系小白 - shellbye</description>
        <link>http://shellbye.com</link>
        <atom:link href="http://shellbye.com/rss/index.xml" rel="self" type="application/rss+xml" />
        <lastBuildDate>Thu, 16 Jun 2016 14:43:34 +0800</lastBuildDate>
        <pubDate>Thu, 16 Jun 2016 14:43:34 +0800</pubDate>
        <ttl>60</ttl>


        <item>
                <title>python mysqldb的一个importerror</title>
                <description>&lt;p&gt;这次的这个问题有点离奇，程序前几天还正常运行，也正常演示了，
准备收拾行李回学校参加论文答辩前一天晚上，
最后运行了一个读取mysql的python脚本，居然发生如下报错信息：&lt;/p&gt;

&lt;p&gt;ImportError: libmysqlclient.so.18: cannot open shared object file: No such file or directory&lt;/p&gt;

&lt;p&gt;没有新安装啥软件，也没有任何其他相关操作，
服务器只是作为爬虫静静的爬了一晚上的数据，第二天就冒出个这么个错误，
而且是在我准备回学校前一天，简直是醉了，折腾了好久，都没解决，
于是根据历史经验“睡一觉第二天就解决了”，我就回去了，在当天晚上飞机的情况下，
来公司，居然真给解决了，当然，不同的情况解决方法可能不太一样，
我在网上找资料时，主要有以下几种解决方案，我都罗列下，说不定有帮助。&lt;/p&gt;

&lt;h3 id=&quot;ldlibrarypath&quot;&gt;1.设置LD_LIBRARY_PATH&lt;/h3&gt;
&lt;p&gt;这可能是比较简单的一种情况，也是&lt;a href=&quot;http://mysql-python.sourceforge.net/FAQ.html#importerror&quot; target=&quot;_blank&quot;&gt;MySQL&lt;/a&gt;官方有记录的一种解决方案，
具体做法就是设置LD_LIBRARY_PATH，将其设置为mysql的库&lt;/p&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-bash&quot; data-lang=&quot;bash&quot;&gt;&lt;span class=&quot;c&quot;&gt;# 注意因为我不是这种情况，所以不保证管用，只是有这么一些解决方法&lt;/span&gt;
&lt;span class=&quot;nb&quot;&gt;export &lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;LD_LIBRARY_PATH&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;/usr/lib/mysql
&lt;span class=&quot;nb&quot;&gt;export &lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;LD_LIBRARY_PATH&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;/usr/lib64/mysql &lt;span class=&quot;c&quot;&gt;#64bit&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;h3 id=&quot;ldd&quot;&gt;2.使用ldd命令&lt;/h3&gt;
&lt;p&gt;这是我没用过的命令，不过有资料里确实是提到了这个命令解决相关问题的场景，
所有有同样的问题的人可以试试，比如&lt;a href=&quot;http://stackoverflow.com/questions/511011/how-can-i-tell-python-which-version-of-libmysqlclient-so-to-use&quot; target=&quot;_blank&quot;&gt;SO&lt;/a&gt;.&lt;/p&gt;

&lt;h3 id=&quot;section&quot;&gt;3.使用链接&lt;/h3&gt;
&lt;p&gt;这个方法大部分都是中文资料里提到的，就是先找到具体的文件位置，
比如本文中的&lt;code&gt;libmysqlclient.so.18&lt;/code&gt;,&lt;/p&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-bash&quot; data-lang=&quot;bash&quot;&gt;&lt;span class=&quot;c&quot;&gt;# 注意因为我不是这种情况，所以不保证管用，只是有这么一些解决方法&lt;/span&gt;
find / -name libmysqlclient.so.18&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;然后在将找到的文件链接到其他的库里，具体可以参考&lt;a href=&quot;http://www.qttc.net/201404430.html&quot; target=&quot;_blank&quot;&gt;这篇文章&lt;/a&gt;和&lt;a href=&quot;http://hzcsky.blog.51cto.com/1560073/891002&quot;&gt;这篇&lt;/a&gt; {:target=”_blank”} &lt;/p&gt;

&lt;h3 id=&quot;section-1&quot;&gt;4.我的方法&lt;/h3&gt;
&lt;p&gt;如果你没有找到文件，那么上面的所有方法都没用，因为你的服务器上根本没有，
这个时候就要考虑去下载一个了，因为我用的centos（爱不起来），我就先用这个命令搜了下哪里有需要的文件：&lt;/p&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-bash&quot; data-lang=&quot;bash&quot;&gt;&lt;span class=&quot;c&quot;&gt;# 解决了我的问题&lt;/span&gt;

yum whatprovides */libmysqlclient.so.18&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;然后从输出的列表里，找了一个包安装，问题解决了&lt;/p&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-bash&quot; data-lang=&quot;bash&quot;&gt;&lt;span class=&quot;c&quot;&gt;# 别的其他包应该也可以，我只是随便选了包含libmysqlclient.so.18的&lt;/span&gt;

yum install mariadb-libs-5.5.44-2.el7.centos.x86_64&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

</description>
                <link>http://shellbye.com/blog/tech_world/ImportError-libmysqlclient.so.18/</link>
                <guid>http://shellbye.com/blog/tech_world/ImportError-libmysqlclient.so.18</guid>
                <pubDate>Sat, 07 May 2016 18:27:08 +0800</pubDate>
        </item>

        <item>
                <title>Spark bug导致的错误信息记录</title>
                <description>&lt;p&gt;这次不能怪&lt;a href=&quot;http://spark.apache.org/examples.html&quot; target=&quot;_blank&quot;&gt;官方文档&lt;/a&gt;了，因为这次的问题也怪我，
在按照上面的例子运行Python版的Text Search时，一直有问题，
在经过排除各种不可能之后，最后锁定在了下面的这个报错信息：&lt;/p&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-bash&quot; data-lang=&quot;bash&quot;&gt;Traceback &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;most recent call last&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;:
  File &lt;span class=&quot;s2&quot;&gt;&amp;quot;&amp;lt;stdin&amp;gt;&amp;quot;&lt;/span&gt;, line 1, in &amp;lt;module&amp;gt;
  File &lt;span class=&quot;s2&quot;&gt;&amp;quot;/Users/jzhang/github/spark/python/pyspark/sql/context.py&amp;quot;&lt;/span&gt;, line 430, in createDataFrame
    &lt;span class=&quot;nv&quot;&gt;jdf&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; self._ssql_ctx.applySchemaToPythonRDD&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;jrdd.rdd&lt;span class=&quot;o&quot;&gt;()&lt;/span&gt;, schema.json&lt;span class=&quot;o&quot;&gt;())&lt;/span&gt;
  File &lt;span class=&quot;s2&quot;&gt;&amp;quot;/Users/jzhang/github/spark/python/pyspark/sql/context.py&amp;quot;&lt;/span&gt;, line 691, in _ssql_ctx
    &lt;span class=&quot;s2&quot;&gt;&amp;quot;build/sbt assembly&amp;quot;&lt;/span&gt;, e&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;
Exception: &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&amp;quot;You must build Spark with Hive. Export &amp;#39;SPARK_HIVE=true&amp;#39; and run build/sbt assembly&amp;quot;&lt;/span&gt;, Py4JJavaError&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;u&lt;span class=&quot;s1&quot;&gt;&amp;#39;An error occurred while calling None.org.apache.spark.sql.hive.HiveContext.\n&amp;#39;&lt;/span&gt;, JavaObject &lt;span class=&quot;nv&quot;&gt;id&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;o34&lt;span class=&quot;o&quot;&gt;))&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;虽然是一个很明确的错误，但是在网上找了好久都没解决，最后居然发现是spark1.6.0的一个&lt;a href=&quot;https://issues.apache.org/jira/browse/SPARK-12120&quot; target=&quot;_blank&quot;&gt;bug&lt;/a&gt;，
更新到1.6.1就没这个问题了，我也是醉了，唉，还是要记得多多保持软件的更新啊！！！&lt;/p&gt;

</description>
                <link>http://shellbye.com/blog/tech_world/spark-bug-lead-to-error-note/</link>
                <guid>http://shellbye.com/blog/tech_world/spark-bug-lead-to-error-note</guid>
                <pubDate>Tue, 12 Apr 2016 18:27:08 +0800</pubDate>
        </item>

        <item>
                <title>Spark network workcount</title>
                <description>&lt;p&gt;不得不先吐槽下spark的&lt;a href=&quot;http://spark.apache.org/docs/latest/streaming-programming-guide.html&quot; target=&quot;_blank&quot;&gt;官方文档&lt;/a&gt;，很多东西说的不是清楚，
也没有把一些容易出错的地方提前告知，让我这种入门级的菜鸟踩了不少坑，
要不是工作需要，按照我往常“试一试”的心态，说不定早就放弃掉了。&lt;/p&gt;

&lt;p&gt;在&lt;a href=&quot;/blog/tech_world/spark-docker-mac/&quot; target=&quot;_blank&quot;&gt;上一篇&lt;/a&gt;博客中，我记录了在Mac上结合Docker来使用Spark的一些笔记，
本文主要记录在具体使用Spark Streaming的过程中，在练习官方示例时遇到的一些问题及其解决方案。&lt;/p&gt;

&lt;p&gt;官方文档在介绍Streaming时，用到了一个简单的&lt;a href=&quot;http://spark.apache.org/docs/latest/streaming-programming-guide.html#a-quick-example&quot; target=&quot;_blank&quot;&gt;例子&lt;/a&gt;,
在对代码进行了简单的讲解之后，官网的演示方法是这样描述的：&lt;/p&gt;

&lt;p&gt;1.在一个中断中输入&lt;code&gt;nc -lk 9999&lt;/code&gt;，这里是用来模拟9999端口的输入；&lt;br /&gt;
2.然后在另一个终端中，输入&lt;code&gt;./bin/spark-submit examples/src/main/python/streaming/network_wordcount.py localhost 9999&lt;/code&gt;，&lt;/p&gt;

&lt;p&gt;到这里，就应该可以正常使用了，然后一切并没有那么简单，
首先，如果你像我一样，并没有严格按照上面的顺序操作，那么，当你先进行了操作2的时候，
你会迎来如下错误：&lt;/p&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-bash&quot; data-lang=&quot;bash&quot;&gt;ERROR ReceiverTracker: Deregistered receiver &lt;span class=&quot;k&quot;&gt;for&lt;/span&gt; stream 0: Restarting receiver with delay 2000ms: Error connecting to localhost:9999 - java.net.ConnectException: Connection refused&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;这个“问题”我也在网上搜了好久，最后在&lt;a href=&quot;http://bit1129.iteye.com/blog/2174751&quot; target=&quot;_blank&quot;&gt;这篇博客&lt;/a&gt;里找到原因，那就是打开的顺序也很重要，
不过这个问题随着你按照操作1进行操作，那么这个问题也就不是问题了。&lt;/p&gt;

&lt;p&gt;接下来的问题是，即使当你按照上面的顺序进行了所有操作之后，依然没法按照预期看到输出，而是：&lt;/p&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-bash&quot; data-lang=&quot;bash&quot;&gt;WARN BlockManager: Block input-0-1460374276000 replicated to only &lt;span class=&quot;m&quot;&gt;0&lt;/span&gt; peer&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;s&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; instead of &lt;span class=&quot;m&quot;&gt;1&lt;/span&gt; peers&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;看到居然不是ERROR，顿时也算是轻松了许多，在万能的[SO]上还是轻松找到了&lt;a href=&quot;http://stackoverflow.com/questions/28050262/spark-streaming-network-wordcount-py-does-not-print-result&quot; target=&quot;_blank&quot;&gt;答案&lt;/a&gt;，
原来是因为在本地模式运行Spark Streaming时，如果使用了&lt;code&gt;local&lt;/code&gt;或者&lt;code&gt;local[1]&lt;/code&gt;这种模式，
那么就只有一个线程在运行了，所以就没有多余的线程来打印了！官方说法见&lt;a href=&quot;http://spark.apache.org/docs/latest/streaming-programming-guide.html#points-to-remember-1&quot;&gt;这里&lt;/a&gt;。&lt;/p&gt;

&lt;p&gt;折腾了好久，终于见到期待的输出了！如下：&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/spark-stream-suc.png&quot; alt=&quot;spark-stream-suc&quot; /&gt;  &lt;/p&gt;

</description>
                <link>http://shellbye.com/blog/tech_world/spark-network-wordcount-example-note/</link>
                <guid>http://shellbye.com/blog/tech_world/spark-network-wordcount-example-note</guid>
                <pubDate>Mon, 11 Apr 2016 18:27:08 +0800</pubDate>
        </item>

        <item>
                <title>Use Spark in Docker on Mac</title>
                <description>&lt;p&gt;在Mac上安装Docker的过程是比较简单的，有详细的&lt;a href=&quot;https://docs.docker.com/engine/installation/mac/&quot; target=&quot;_blank&quot;&gt;官方文档&lt;/a&gt;介绍，
本文主要记录我在Docker中使用Spark的一些笔记。&lt;/p&gt;

&lt;h2 id=&quot;docker-spark&quot;&gt;1.下载docker-spark&lt;/h2&gt;
&lt;p&gt;我们需要的docker文件一般都是在&lt;a href=&quot;https://hub.docker.com/&quot; target=&quot;_blank&quot;&gt;Docker Hub&lt;/a&gt;上，它类似Github，
只是上面存放的都是一些docker文件。我们需要的是sequenceiq/spark这个库，
具体的下载命令类似git，是
&lt;code&gt;docker pull sequenceiq/spark:1.6.0&lt;/code&gt;，
接下来就是困扰了我很久的地方了，在这个库的&lt;a href=&quot;https://hub.docker.com/r/sequenceiq/spark/&quot; target=&quot;_blank&quot;&gt;文档&lt;/a&gt;中，
接下来就是用
&lt;code&gt;docker build --rm -t sequenceiq/spark:1.6.0 .&lt;/code&gt;来build了，
可是我尝试了很多次，每次都会报错
&lt;code&gt;unable to prepare context: unable to evaluate symlinks in Dockerfile path:
lstat /Users/username/Dockerfile: no such file or directory&lt;/code&gt;，
在网上找了很久也一直没有解决这个问题，直到搜到了作者的一个更老的版本的&lt;a href=&quot;http://blog.sequenceiq.com/blog/2015/01/09/spark-1-2-0-docker/&quot; target=&quot;_blank&quot;&gt;博客&lt;/a&gt;，
里面关于build是这样说的，&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;Alternatively you can always build your own container based on our Dockerfile.  &lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;Alternatively！！！这不是坑爹嘛！！！为啥在1.6里面就没有这个关键的字眼了呢！
尤其是对我这种docker新手来说！！！不过话说回来，
主要也是我没理解了docker build的&lt;a href=&quot;https://docs.docker.com/engine/reference/commandline/build/&quot; target=&quot;_blank&quot;&gt;含义&lt;/a&gt;：&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;Build a new image from the source code at PATH.  &lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;Build是用来依据Dockerfile重新创建一个image的，而我们其实在第一步的pull中就已经获得了一个image，
可以通过命令&lt;code&gt;docker images&lt;/code&gt;来查看你已经有的images。&lt;/p&gt;

&lt;h2 id=&quot;docker-spark-1&quot;&gt;2.启动docker-spark&lt;/h2&gt;
&lt;p&gt;当通过pull获得了image或者通过build得到了image之后，接下来就可以启动了，
&lt;code&gt;docker run -it -p 4040:4040 -h sandbox sequenceiq/spark:1.6.0 bash&lt;/code&gt;&lt;br /&gt;
具体的run命令的各个参数，可以参考&lt;a href=&quot;https://docs.docker.com/engine/reference/run/&quot;&gt;具体的文档&lt;/a&gt;。
这个时候，你就已经进入了包含了spark的一个bash环境，然后就可以使用spark了。&lt;/p&gt;

&lt;p&gt;理论上讲到这里就应该结束了，但是并不能，因为我在实际操作时发展，每次我在spark里做的改动，
当我下一次重新用上面的命令启动时，全部都丢失了，又一次需要重新开始。
在&lt;a href=&quot;http://stackoverflow.com/questions/19585028/i-lose-my-data-when-the-container-exits&quot; target=&quot;_blank&quot;&gt;SO&lt;/a&gt;上找到这个问答，
才明白原来run命令运行一次就可以了，run命令其实是启动了一个container，每次run的时候，
都是重新启动一个全新的container，所以如果要接着上次的工作进行的话，可以使用
&lt;code&gt;docker attach f357e2faab77&lt;/code&gt;(注意最后一个是container的id，用&lt;code&gt;docker ps -a&lt;/code&gt;可以查看)。&lt;/p&gt;

&lt;p&gt;好了，这样的话一个基本的使用场景就搞定了，以后如果有新的发现再来记录。  &lt;/p&gt;

</description>
                <link>http://shellbye.com/blog/tech_world/spark-docker-mac/</link>
                <guid>http://shellbye.com/blog/tech_world/spark-docker-mac</guid>
                <pubDate>Sat, 09 Apr 2016 18:27:08 +0800</pubDate>
        </item>

        <item>
                <title>重拾数学1－箱线图</title>
                <description>&lt;p&gt;来到&lt;a href=&quot;http://100tal.com/&quot; target=&quot;_blank&quot;&gt;新公司&lt;/a&gt;实习之后，发现我将要做的工作是我一直以来期待的关于机器学习和人工智能的东西，
兴奋至于也终于意识到不得不好好补补自己的数学了，于是打算写一个重拾数学的学习笔记，
尽量做到每天一篇，看看能坚持多久吧。&lt;/p&gt;

&lt;p&gt;首先是在&lt;a href=&quot;https://www.khanacademy.org/math/probability&quot; target=&quot;_blank&quot;&gt;KHanACADEMY&lt;/a&gt;上遇到的第一个问题，就是&lt;a href=&quot;http://www.physics.csbsju.edu/stats/box2.html&quot; target=&quot;_blank&quot;&gt;box plot&lt;/a&gt;, &lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;The box plot (a.k.a. box and whisker diagram) is a standardized way of displaying the 
distribution of data based on the five number summary: 
minimum, first quartile, median, third quartile, and maximum.  &lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;Box plot中文应该是叫箱线图，主要用来以较少的数据直观的描述数据集的分布情况，其主要用的值有最小值、
中位数、最大值、第一四分位数和第三四分位数等。&lt;/p&gt;

&lt;p&gt;举例：&lt;br /&gt;
请给出一下有序数列的box plot图，4，5，7，7，7，8，10，11，11，13，13，14.&lt;/p&gt;

&lt;p&gt;解：&lt;br /&gt;
首先需要找到的五个点以及其对应的寻找方法如下：&lt;br /&gt;
1. 最大值：数列中的最大值&lt;br /&gt;
2. 最小值：数列中的最小值&lt;br /&gt;
3. 中位数：如果数列中数的个数为奇数，则直接取数列长度除以2向上取整的位置所在的数
（如10，20，30，40，50中，数列长度为5，5/2向上取整为3，所以，中位数为位于第三个位置的数30）；
如果数列中数的个数为偶数，则取数列长度除以2的位置的数，以及其后面的数，在本例中，即第六和第七位数，
分别为8和10，然后在求二者的平均数，本例中即为9，所以本例中的数列的中位数即为9.&lt;br /&gt;
4. 第一四分位数：如果数列中数的个数为奇数，则第一四分位数为去掉中位数之后前面剩余的数所组成的数列的中位数，
如果数列中数的个数为偶数，则第一四分位数为前面一半的数所组成的数列的中位数。&lt;br /&gt;
5. 第三四分位数：如果数列中数的个数为奇数，则第三四分位数为去掉中位数之后后面剩余的数所组成的数列的中位数，
如果数列中数的个数为偶数，则第三四分位数为后面一半的数所组成的数列的中位数。  &lt;/p&gt;

&lt;p&gt;找到以上所需的五个数之后，接下来就是要在数轴上画图的过程了，每个点具体的画法如下所示：&lt;br /&gt;
&lt;img src=&quot;http://www.physics.csbsju.edu/stats/simple.box.defs.gif&quot; alt=&quot;simple.box.defs&quot; /&gt;  &lt;/p&gt;

&lt;p&gt;其中的第一四分位数到第三四分位数之间的长方形叫做interquartile range（IQR），IQR内部的线为中位数，
IQR外面一上一下两条短线表示最大与最小值。&lt;/p&gt;

&lt;p&gt;本例中最终的作图结果如下图：&lt;br /&gt;
&lt;img src=&quot;/assets/box-plot1.png&quot; alt=&quot;box plot&quot; /&gt;  &lt;/p&gt;

&lt;p&gt;参考：&lt;br /&gt;
&lt;a href=&quot;http://www.physics.csbsju.edu/stats/box2.html&quot; target=&quot;_blank&quot;&gt;1.Box Plot: Display of Distribution&lt;/a&gt;&lt;br /&gt;
&lt;a href=&quot;https://en.wikipedia.org/wiki/Box_plot&quot; target=&quot;_blank&quot;&gt;2.Box plot - Wikipedia, the free encyclopedia&lt;/a&gt;&lt;br /&gt;
&lt;a href=&quot;http://www.gdstats.gov.cn/tjkw/tjyyc/2003/2003/2/0013.htm&quot; target=&quot;_blank&quot;&gt;3.BOX PLOT–描述统计的一个简便工具&lt;/a&gt;  &lt;/p&gt;

</description>
                <link>http://shellbye.com/blog/tech_world/Pick-up-Math-1-box-plot/</link>
                <guid>http://shellbye.com/blog/tech_world/Pick-up-Math-1-box-plot</guid>
                <pubDate>Fri, 08 Apr 2016 18:27:08 +0800</pubDate>
        </item>

        <item>
                <title>Django Pagination note</title>
                <description>&lt;p&gt;在&lt;code&gt;ListView&lt;/code&gt;中使用了&lt;code&gt;paginate_by&lt;/code&gt;之后，
并在&lt;code&gt;template&lt;/code&gt;中使用了&lt;code&gt;object_list.first&lt;/code&gt;这样的变量时，
Django抛出了如下错误：&lt;/p&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-bash&quot; data-lang=&quot;bash&quot;&gt;Cannot reorder a query once a slice has been taken.&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;在&lt;a href=&quot;/blog/tech_world/Django-ListView-advance/&quot; target=&quot;_blank&quot;&gt;Advanced Django ListView&lt;/a&gt;中，我也提到过同样的问题，
但是两者的原因是不一样的。
上一次的错误是&lt;code&gt;AssertionError at Cannot filter a query once a slice has been taken&lt;/code&gt;，
即一旦分片之后，因为SQL已经执行了所以没法再去&lt;code&gt;filter&lt;/code&gt;，
而这一次的问题是不能再排序（&lt;code&gt;reorder&lt;/code&gt;），之所以说是再排序，
是因为在分页的时候，Django已经进行了一次&lt;a href=&quot;https://docs.djangoproject.com/en/1.9/ref/models/querysets/#order-by&quot; target=&quot;_blank&quot;&gt;排序&lt;/a&gt;，
这次排序中，如果在&lt;code&gt;model&lt;/code&gt;中没有指定排序的方式（&lt;code&gt;ordering&lt;/code&gt;），
那么就会默认使用其主键（默认为&lt;code&gt;id&lt;/code&gt;）。
那么第二次排序发生在哪里呢？发生在调用&lt;code&gt;object_list.first&lt;/code&gt;时，
看&lt;a href=&quot;https://github.com/django/django/blob/master/django/db/models/query.py#L544&quot; target=&quot;_blank&quot;&gt;源码&lt;/a&gt;可以发现，first并不是简单的取了当前&lt;code&gt;queryset&lt;/code&gt;的第一个，
而是又一个判断的过程，判断它是否已经排序，若已经排序，则取第一个，
否则按照主键排序再取第一个，这就是第二次排序发生的地方，
究其原因，是因为我在&lt;code&gt;model&lt;/code&gt;的定义中没有在&lt;code&gt;Meta&lt;/code&gt;中指定排序字段，
即&lt;code&gt;ordering&lt;/code&gt;.如果指定了该字段，则可以避免上面的问题。&lt;/p&gt;

&lt;p&gt;在找资料的过程中，我发现了一种可以避免第二次排序的方式，
就是不用&lt;code&gt;object_list.first&lt;/code&gt;这样的形式，而用&lt;code&gt;object_list.0&lt;/code&gt;，
这个就不管顺序了，直接取出目前最前面那个，这样同样也不会出现第二次排序，
也不会报错了。&lt;/p&gt;

</description>
                <link>http://shellbye.com/blog/tech_world/Django-ListView-note/</link>
                <guid>http://shellbye.com/blog/tech_world/Django-ListView-note</guid>
                <pubDate>Thu, 07 Jan 2016 19:27:08 +0800</pubDate>
        </item>

        <item>
                <title>2015年终总结</title>
                <description>&lt;p&gt;去了一趟西安，再回来成都时，2016都已经到了第四天了，本来打算年前动笔的年终总结也拖到了年后，好在不晚，
现在写，既是总结，也是计划了。&lt;/p&gt;

&lt;p&gt;2015年可以说是我的旅行元年了，跨年时我是在重庆，第一次真正意义上的旅行，除了生我养我的包头，
已经不知不觉待了近七年的成都，这是第一次到达另一座城市，短短三天时光，
我和我女朋友用最快的速度、最详细周密的计划，游玩了重庆的大部分景点，
去了“原来这么小的”解放碑，第一次真正的坐船，第一次坐滑索，坐了菜园坝火车站超长的扶梯，
说起这个扶梯，我至今印象深刻，因为它长的让我害怕，也去了“类似锦里”的磁器口，
买了一百块的大名鼎鼎的陈麻花却都拉在了动车上，被返程的动车又拉回了重庆。
中途还去了一趟武隆，只去看了天坑，没有去地缝，和那里的变形金刚合了影，
又做了几十米高的两层电梯，也拍了几十张后来从来没看过的芙蓉洞。&lt;/p&gt;

&lt;p&gt;说2015是旅行元年不仅仅因为这一年我第一次旅行，而是因为这一年去过的地方太多了。
虽然这一年前半年忙于找工作，后半年忙于写论文，但是依旧走了不少地方，
对于刚开始旅行的人而言，这个开头开的真的有点大了。&lt;/p&gt;

&lt;p&gt;年后回来成都就开始找实习了，因为经历过本科那次噩梦般的求职经历，
所以我对于找工作一直是有一定的畏惧心理的，直到我五月从女朋友家回来之后，
通过霸面拿到阿里巴巴的实习offer之后，我才算是能把心放在肚子里了。
在三四月份，先后两次电话面试都因为各种原因挂掉了，当然主要还是我准备不够充分，
以为自己有一定的经验，就可以“裸面”，事实是面试官问的那些一个个看起来很简单的问题，
却总说不到点子上，回过头来想想，现在让我去面试当时的我，我估计我也不一定能坚持面自己超过八分钟。&lt;/p&gt;

&lt;p&gt;六月去杭州是一个如我期待的那样的转折点，其功能类似读研之于我一样，
在很大程度上给我提供了一个足够缓冲并提高的时间，让我得以脱胎换骨。
收获不仅仅是技术上的，更多的其实是视野上的。当然，这个说的并不是西湖的那个午后，
而是独立生活这种全新的命题以及随之而来的一系列故事，
我终于深刻理解了《功夫》里的“房东”这个概念，因为一直以来不是在自己家，
就是在学校宿舍，还真是一直没有自己找房子租房子过，没有那种寄人篱下的无奈感。
也就是在这个时候，我才明白了之前流行过好一阵子的“安全感”的意思。
/* 契约精神的缺乏，以及资源的稀少，让很多人一直小心谨慎的活着，
对于很多人来说，一个稳定的合法的，在自己名下的房子，才能真正防止自己流落街头。
国人对漂泊一直心怀抵触，总喜欢稳稳当当，所以当大家有了钱之后，很多人的想法都是置地买房，
有时候想想真是觉得可悲，同一片蓝天下，还有那么多人在考虑如何活下去，
就像那个叙利亚的小男孩的一样，活着，竟成了是第一要务。不过，有了房子就真的安全了吗？
就在60多年前，不远，就60多年前，很多有房有地的人，就因为有房有地而被一群人杀掉，
房与地被瓜分，现在，60多年后，人还是那群人，你真的觉得你用尽一生的积蓄，
买了一片土地上空的某一层，能让你真正的安全？ */&lt;/p&gt;

&lt;p&gt;8月低回来时，我是有一种衣锦还乡的错觉的，不过这个错觉很快被中国互联网的所谓“寒冬”唤醒了，
于是又开始了一系列的求职(sheng)之路，混混沌沌一个月，各种电话面、视频面和现场面，
也经历一次传说中的群面，终于，一家我满意也满意我的公司给我发了offer，一切尘埃落定之后，
又一次前往新乡，说实话，这次再去女朋友家，明显就自我感觉好很多，毕竟有了着落，
对女朋友父母也好交代，他们的宝贝女儿，不会跟着我吃苦，我也是有能力创造一个美好未来，并支撑一个家的。&lt;/p&gt;

&lt;p&gt;古人有云，“福兮祸之所伏”（《老子》），太美好的时候，就要准备接受打击了，于是乎，
在我开始准备写论文时，我失去了我人生的第一份实习工作，从2013年3月份电子科大研究生录取分数线公布，
到我从这家公司离职，我在这个团队，在这个方向，也算是干了两年半了，我从这里起步开始写代码，
从PHP到Python，从Yii到Django，从WEB到爬虫，一路走来，故事不可谓不多，
从最初甚至萌生过自己不适合当程序员的想法，到最后自信满满的计划成为职业程序员，
从遇到问题就问师兄问师弟，到去stackoverlow.com去帮助别人，并成为Established User，
这是一个技术成长的过程，也是我不断认识自我，提升自我的过程，也是在这段时间里，
我遇到了我的女朋友，我把她也带入程序员的队伍中，并与她一起互相学习，共同成长，
最后被“青出于蓝”。就像我上面说的那样，这是我人生的一个转折点，如果没有这段经历，
也许我现在可能是TP－Link的年度销售冠军呢，谁知道呢，^_^&lt;/p&gt;

&lt;p&gt;当然，古人也有云，“祸兮福之所倚”（《老子》），失业后，又机缘巧合之下接到腾讯的产品电话面试，
并最后意外转入&lt;a href=&quot;/blog/tech_world/tecent_product_manager_interview_note/&quot;&gt;产品培训生&lt;/a&gt;面试环节，于是前后两次飞到深圳参加群面、HR面、业务面以及GM面，
并最后在经过一轮电话加面后成功拿到腾讯2016产品培训生offer，这无疑是对我在产品方向上的潜力的一个认同，
原来一直以来某些有眼光的人都是对的，我可能真的有做产品的潜力，但是经过慎重的考虑之后，
我还是决定要在技术的道路上发展，一来是因为我长久的职业规划和目前的职业积累都在技术领域，
短期内没有做产品的计划，二来也是因为我相比于腾讯，在好未来，我会拥有更好的未来，^_^&lt;/p&gt;

&lt;p&gt;2015的年末，正好利用失业的空隙，也开始练车了，目前为止一切顺利，科一已过，
希望能尽快拿到驾照，然后以后不想喝酒时就可以抱歉的说，“实在不好意思，今天是开车来的，不能喝酒”。&lt;/p&gt;

</description>
                <link>http://shellbye.com/blog/tech_world/2015-summary/</link>
                <guid>http://shellbye.com/blog/tech_world/2015-summary</guid>
                <pubDate>Mon, 04 Jan 2016 19:27:08 +0800</pubDate>
        </item>

        <item>
                <title>Advanced Django ListView</title>
                <description>&lt;p&gt;之前学习Djang时写过一个入门版本的关于ListView的&lt;a href=&quot;/blog/tech_world/django_ListView_DetailView_basic/&quot; target=&quot;_blank&quot;&gt;笔记&lt;/a&gt;，
但是其中的东西都笔记基础，没法进行高级的定制，所以有了这篇笔记，
纪录下自己最新的一些心得。&lt;/p&gt;

&lt;h3 id=&quot;section&quot;&gt;1.添加返回数据&lt;/h3&gt;

&lt;p&gt;接&lt;a href=&quot;/blog/tech_world/django_ListView_DetailView_basic/&quot; target=&quot;_blank&quot;&gt;上一篇&lt;/a&gt;笔记，假如现在你要在新闻的列表页中集中显示所有的新闻类别，
要怎么做呢？因为你把很多的逻辑都托管给Django了，所以这个时候，新添加的逻辑也是要依赖于Django的，
比如你要新添加的数据，就要用到&lt;a href=&quot;https://docs.djangoproject.com/en/1.9/ref/class-based-views/mixins-multiple-object/#django.views.generic.list.MultipleObjectMixin.get_context_data&quot; target=&quot;_blank&quot;&gt;&lt;code&gt;get_context_data&lt;/code&gt;&lt;/a&gt;这个函数了，
官网中关于&lt;code&gt;get_context_data&lt;/code&gt;的介绍是：&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;Returns context data for displaying the list of objects.  &lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;这是一个字典，其中默认已经包含了四个对象，一个是返回的对象列表和三个关于分页的对象。
现在我们要在其中添加东西，那就就自己实现一遍这个函数就可以了，代码如下：&lt;/p&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-python&quot; data-lang=&quot;python&quot;&gt;&lt;span class=&quot;k&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;get_context_data&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;bp&quot;&gt;self&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;**&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;kwargs&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;):&lt;/span&gt;
	&lt;span class=&quot;c&quot;&gt;# 先通过调用父类的方法获取到原始的context对象，其中包含上面提到的四个对象&lt;/span&gt;
	&lt;span class=&quot;n&quot;&gt;context&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;super&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;NewsList&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;bp&quot;&gt;self&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;get_context_data&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;**&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;kwargs&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
	&lt;span class=&quot;c&quot;&gt;# 在其中添加我们想要添加的对象，这样context就有五个对象了&lt;/span&gt;
	&lt;span class=&quot;n&quot;&gt;context&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&amp;#39;category_list&amp;#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;NewsCategory&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;objects&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;all&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt;
	&lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;context&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;然后在&lt;code&gt;templates&lt;/code&gt;中，我们就可以直接使用&lt;code&gt;category_list&lt;/code&gt;这个对象了，像这样：&lt;/p&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-python&quot; data-lang=&quot;python&quot;&gt;&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;%&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;for&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;c&lt;/span&gt; &lt;span class=&quot;ow&quot;&gt;in&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;category_list&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;%&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;{{&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;c&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;title&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;}}&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;%&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;endfor&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;%&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;h3 id=&quot;section-1&quot;&gt;2.自定义返回对象集&lt;/h3&gt;
&lt;p&gt;在&lt;a href=&quot;/blog/tech_world/django_ListView_DetailView_basic/&quot; target=&quot;_blank&quot;&gt;上一篇&lt;/a&gt;笔记中，我们是直接获取的所有的新闻，
现在假设我们要添加一个搜索功能，按照新闻标题进行搜索，然后只返回那些命中搜索的新闻，
这就需要过滤返回的结果集了，基于上面的内容，我们最容易想到的就是在&lt;code&gt;get_context_data&lt;/code&gt;中，
对其中的&lt;code&gt;object_list&lt;/code&gt;进行过滤，比如在&lt;code&gt;return&lt;/code&gt;语句前添加如下一行：&lt;/p&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-python&quot; data-lang=&quot;python&quot;&gt;&lt;span class=&quot;n&quot;&gt;context&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&amp;#39;news_list&amp;#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;context&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&amp;#39;news_list&amp;#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;filter&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;title__contains&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&amp;#39;search_text&amp;#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;这样的写法，当有分页功能时（大多数情况下是有的），就会出现如下错误：&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;AssertionError at Cannot filter a query once a slice has been taken.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;官网的解释在&lt;a href=&quot;https://docs.djangoproject.com/en/1.9/topics/db/queries/#limiting-querysets&quot;&gt;这里&lt;/a&gt;，说白了就是一旦分页了，也就是&lt;code&gt;slice&lt;/code&gt;了之后，这个查询就在数据库里执行过了，
所以这个时候就没法继续去&lt;code&gt;filter&lt;/code&gt;了。所以这并不是一个优雅的解决方案，优雅的方案是使用正确的函数，
这里正确的函数就是&lt;a href=&quot;https://docs.djangoproject.com/en/1.9/ref/class-based-views/mixins-multiple-object/#django.views.generic.list.MultipleObjectMixin.get_queryset&quot; target=&quot;_blank&quot;&gt;&lt;code&gt;get_queryset&lt;/code&gt;&lt;/a&gt;这个函数了，比如：&lt;/p&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-python&quot; data-lang=&quot;python&quot;&gt;&lt;span class=&quot;k&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;get_queryset&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;bp&quot;&gt;self&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;):&lt;/span&gt;
	&lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&amp;#39;q&amp;#39;&lt;/span&gt; &lt;span class=&quot;ow&quot;&gt;in&lt;/span&gt; &lt;span class=&quot;bp&quot;&gt;self&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;request&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;GET&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;
		&lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;News&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;objects&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;filter&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;title__contains&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;bp&quot;&gt;self&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;request&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;GET&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&amp;#39;q&amp;#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;])&lt;/span&gt;
	&lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;super&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;NewsList&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;bp&quot;&gt;self&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;get_queryset&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;了解一个框架的最佳方式就是要懂其常用函数的功能，那么写一个框架的最佳方式，
就是函数名一定要见名知意，不然找正确的函数就比较痛苦了。&lt;/p&gt;

</description>
                <link>http://shellbye.com/blog/tech_world/Django-ListView-advance/</link>
                <guid>http://shellbye.com/blog/tech_world/Django-ListView-advance</guid>
                <pubDate>Tue, 29 Dec 2015 18:27:08 +0800</pubDate>
        </item>

        <item>
                <title>Pure js implements getJSON with X-Requested-With header</title>
                <description>&lt;p&gt;用纯js实现jquery里面的getJSON方法在网上是有比较多的资料的，
比如在&lt;a href=&quot;http://youmightnotneedjquery.com/#json&quot;&gt;You Might Not Need Jquery&lt;/a&gt;中，就有如下实现：&lt;/p&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-javascript&quot; data-lang=&quot;javascript&quot;&gt;&lt;span class=&quot;c1&quot;&gt;// jquery&lt;/span&gt;
&lt;span class=&quot;nx&quot;&gt;$&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;getJSON&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;&amp;#39;/my/url&amp;#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;function&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;data&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;

&lt;span class=&quot;p&quot;&gt;});&lt;/span&gt;

&lt;span class=&quot;c1&quot;&gt;// pure js&lt;/span&gt;
&lt;span class=&quot;kd&quot;&gt;var&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;request&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;XMLHttpRequest&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;();&lt;/span&gt;
&lt;span class=&quot;nx&quot;&gt;request&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;open&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;&amp;#39;GET&amp;#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;&amp;#39;/my/url&amp;#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;kc&quot;&gt;true&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;

&lt;span class=&quot;nx&quot;&gt;request&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;onload&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;function&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;status&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;gt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;200&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;amp;&amp;amp;&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;status&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;400&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;c1&quot;&gt;// Success!&lt;/span&gt;
    &lt;span class=&quot;kd&quot;&gt;var&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;data&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;JSON&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;parse&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;response&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
  &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;else&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;c1&quot;&gt;// We reached our target server, but it returned an error&lt;/span&gt;

  &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;};&lt;/span&gt;

&lt;span class=&quot;nx&quot;&gt;request&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;onerror&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;function&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;c1&quot;&gt;// There was a connection error of some sort&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;};&lt;/span&gt;

&lt;span class=&quot;nx&quot;&gt;request&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;send&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;();&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;但是我在用这段代码异步获取验证码图片时，其效果却和&lt;code&gt;getJSON&lt;/code&gt;不一样，
用后者时是可以正常返回结果的，但是用纯js时，后台却返回了404，
对比两次的HTTP请求之后，发现用纯js方法时构造的HTTP请求比用&lt;code&gt;getJSON&lt;/code&gt;少了一个Header，
就是&lt;code&gt;X-Requested-With&lt;/code&gt;，这是一个很重要的非标准Header，
&lt;a href=&quot;https://en.wikipedia.org/wiki/List_of_HTTP_header_fields#Common_non-standard_request_fields&quot;&gt;Wiki&lt;/a&gt;解释的比较清楚了，&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;mainly used to identify Ajax requests. 
Most JavaScript frameworks send this field with value of &lt;code&gt;XMLHttpRequest&lt;/code&gt;&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;也就是说这个Header是用来标记请求是否为&lt;code&gt;Ajax&lt;/code&gt;的，为什么要这样做呢？
为了防止跨站脚本攻击，也就是大名鼎鼎的&lt;code&gt;CSRF&lt;/code&gt;，那么既然如此，需要怎么做呢？
很简单，就是在上面的代码&lt;code&gt;open&lt;/code&gt;之后添加如下一行即可：&lt;/p&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-javascript&quot; data-lang=&quot;javascript&quot;&gt;&lt;span class=&quot;nx&quot;&gt;request&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;setRequestHeader&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&amp;quot;X-Requested-With&amp;quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&amp;quot;XMLHttpRequest&amp;quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

</description>
                <link>http://shellbye.com/blog/tech_world/pure-js-implements-getJSON-with-header-X-Requested-With/</link>
                <guid>http://shellbye.com/blog/tech_world/pure-js-implements-getJSON-with-header-X-Requested-With</guid>
                <pubDate>Sun, 27 Dec 2015 19:27:08 +0800</pubDate>
        </item>

        <item>
                <title>腾讯产品培训生面试笔记</title>
                <description>&lt;p&gt;腾讯的产品经理在中国互联网界有口皆碑，这肯定不是巧合。
昨天刚收到补录的产培生offer，所以今天写下面试经验，
因为当初我准备的时候，没有太多详细的经验贴，
所以希望我可以说的详细点，以供后来人好好准备。&lt;/p&gt;

&lt;p&gt;首先是群面，我们当时是9个人，一组五人，一组四人，
群面的第一步就是一分钟的自我介绍，这里需要注意，
这个一分钟的自我介绍是有目的的，是命题作文，
不是自由发挥。一分钟内我们的目的是，
说清楚自己的基本信息（年龄，家乡，大学等），
然后简单介绍下自己的产品经历，自己的特点。
其实很简单，目标清楚了就比较容易准备。
这个时候要注意不要超时，这个不要超时不是说要计时一分钟，
而是不要没人喊停就一直说，点到为止就可以了，
说清楚上面的内容也基本上就一分钟差不多了，
超几秒应该没事，不过不同的面试官可能会不同。
所以观察面试官的反应也很重要，要先对基本的规则有个把握，
所以第一个作自我介绍有一定的风险，当然好处是一马当先。
自我介绍是不规定顺序的，谁想说谁说，但是基本上有自告奋勇的人之后，
大家都会挨个进行。&lt;/p&gt;

&lt;p&gt;第二步是一个互动过程。大家针对刚才的自我介绍进行互相的点评。
说一下经过一轮自我介绍，你都对哪些人有了深刻的印象，以及为什么。
这个时候，就是考验你刚才有没有认真听其他人的自我介绍的时候了，
正常听了大家的介绍之后，一定会对某些人有了一定的初步印象，
互相点评一下就好。这个环节如实陈述就好，一般给你留下比较好印象的在后面的表现也都会很好。&lt;/p&gt;

&lt;p&gt;第三步就是15分钟的讨论了，这就是真正的群面内容了，
讨论的过程一定要注意，不要说个不停，一定要给别人留下时间，
当然，遇到一直说不停的，你也要学会在他喘息之间打断他，
虽然我们正常说话都不会这样，但是这个时候这是一个很重要的技能，
虽然不说“商场如战场”这样的话，但是如果你不掌握一定的技能，
那么你可能真的会被淘汰，用后来我听到的一句HR回答求职者的“我为啥没过群面”的话来说，
就是“我对你没印象”。求职不是过家家，要认真对待。
那么，怎么科学的打断别人呢？首先你要注意听他的话，
群面大家都是现场准备，不会出现很完整的长篇大论，
所以你要在他逻辑的空档打断他，当然如果对方逻辑比较强，
没有空档，你就利用他咽口水或者呼吸的瞬间打断他就好了。
反过来，如果你被打断好几次了，那么你就要注意了，
是不是自己说的太多了，这个时候要把时间适度的让给别人，
15分钟其实是很足够的，基本上平均没人有三分钟的发言，
而且你要知道，不仅仅是说话，你的动作、表情等也都很重要。&lt;/p&gt;

&lt;p&gt;第四步就是总结，大家都普遍有个误区，就是认为群面一定要争取总结的资格。
我认为这个其实没那么重要，总结是有一定的好处，毕竟是一个单独的发言机会，
但是它也有一定的弊端，所谓“言多必失”，总结的人如果没有很好的总结，
一来对不起队友的幸苦讨论，二来容易暴露自己的一些不足，
所以我觉得没有必要在意总结的这个所谓机会，因为大多群面总结之后都会有队友补充，
这个时候你可以从容的站起来讲自己的观点，即可以吸收总结者的经验，
也可以发表自己独特的见解，相比总结，我觉得这个机会反而需要牢牢把握。&lt;/p&gt;

&lt;p&gt;这里我就要给好未来打个广告了，好未来的群面总结之后，会有一个challenge，
让别的组的人给你提问，对你们队的观点进行一些反驳，你们要做好防守准备，
回答别人的提问。腾讯的产培生群面中，没有这个环节，
我个人认为这个环节是很有必要的，因为压力之下的表现也是一个很重要的衡量指标。&lt;/p&gt;

&lt;p&gt;第五步又是一个互动的过程，这次是点评下对方在总结和补充方面的表现，
因为拿到的是同一个题目，所以大家的总结总有一些值得借鉴的地方，
我觉得这个时候一定要表现风度，不要攻击对方，说对方哪里不好，
我认为这个时候正是要表扬对方的时候，说一点对方的闪光点，
一些好的idea。&lt;/p&gt;

&lt;p&gt;就这样，群面就结束了，整体来说，我感觉不要表现太强的攻击性，
队内要和谐互助，团结一致，尽量在最后统一观点，不要出现太大的分歧，
否则我感觉会团灭，因为产品经历的协调能力很重要，如果一群产品经历都没法协调，
那怎么和设计、研发协调呢？&lt;/p&gt;

&lt;p&gt;群面过了之后，就是专业初面。面试官一般都会需要你进行一点简单的自我介绍，
这个时候就没有太多经验了，因为不同的人问到的问题都是不一样的，主要是根据个人经历。
需要注意的是，一定不要掉入压力面的陷阱，面试官有时候可能会估计刁难下你，
这个时候一定不能乱了阵脚，不要被面试官引入歧途，急着和他较真。
你的目的是向他展示你自己，而不是说服他，你要按照自己的思路来讲自己的经历。
比如他问你，这个产品你当时为什么不这样处理呢？这样处理岂不是更好？
你就简单的说，“这个注意确实比较好，当时确实没有想到，如果这样处理说不定真的会很好”，
千万不要反驳、解释。你简单说完这些之后，要继续你的思路。&lt;/p&gt;

&lt;p&gt;专业初面之后，就是HR面了，这个我感觉在产品经理这个职业内应该不会是问题，
做技术有比较担心HR面的，不过一般都没啥大问题，当然，聊的比较好的话，
肯定是有加分的。我觉得这个时候就要突出故事性，什么叫故事性呢？
就是你不能和HR说我是个乐观的人，你要和HR说，有一次，发生了什么什么事情，
大家都觉得完蛋了，但是我觉得凡事都有好的一面，我就安慰大家没事的，然后又怎么怎么样，
后来大家就都没事了。看到没，这才叫乐观。&lt;/p&gt;

&lt;p&gt;专业初面之后，就是传说中的GM面，为啥是传说中的呢？因为据说GM都是很牛逼的人物，
都是能在互联网上找到新闻的人物，事实证明确实是这样。基本上走到这一步，
从专业角度说明你已经是一个合格的产品经历了，那么能不能进入产培呢？
这个就真的是“功夫在诗外”了，平时要多积累，并不是说要多研究APP，
而是真的要读读诗，看看画，旅旅游，尽量能够使自己能从多个角度考虑问题，
而不张口用户体验，闭口用户需求，做产品，其实是很难的，当然我说的是好产品。&lt;/p&gt;

&lt;p&gt;不知道为啥我和另一个同学又加了一个电话的“final final interview”，有两个问题，
我觉得不错，就和大家分享下。第一个是介绍下你自己在产品角度的独特之处，
是啊，你已经是一个合格的产品经历了，那么，那么多的产品经历中，你有啥独特之处呢？
这个问题挺好，大家可以平日里多想想，哈哈。第二个就是从你的项目中，找出一个来，
假设面试官是投资人，你现在有三分钟时间，来“骗点钱”（面试官原话），这个问题就更好了，
它让你能在一个较高的纬度思考自己的产品，培养自己的大局观。&lt;/p&gt;

&lt;p&gt;嗯，以上就是整个腾讯产品培训生的全部经验了。希望可以给看到的同学一点点启发。&lt;/p&gt;

</description>
                <link>http://shellbye.com/blog/tech_world/tecent_product_manager_interview_note/</link>
                <guid>http://shellbye.com/blog/tech_world/tecent_product_manager_interview_note</guid>
                <pubDate>Tue, 15 Dec 2015 00:00:00 +0800</pubDate>
        </item>

        <item>
                <title>Django CreateView add request user</title>
                <description>&lt;p&gt;在实际的开发中,我们有些操作常常是要记录当前操作的用户的,
比如我在下面的例子中,用户可以自定义话题,那么,所有用户自定义
的话题,就需要记录是哪个用户定义了它,下面我就结合Django自带
的CreateView来记录下今天的Django学习笔记.&lt;/p&gt;

&lt;p&gt;首先是&lt;code&gt;models.py&lt;/code&gt;&lt;/p&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-python&quot; data-lang=&quot;python&quot;&gt;&lt;span class=&quot;c&quot;&gt;# -*- coding: utf-8 -*-&lt;/span&gt;
&lt;span class=&quot;kn&quot;&gt;from&lt;/span&gt; &lt;span class=&quot;nn&quot;&gt;django.db&lt;/span&gt; &lt;span class=&quot;kn&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;models&lt;/span&gt;
&lt;span class=&quot;kn&quot;&gt;from&lt;/span&gt; &lt;span class=&quot;nn&quot;&gt;django.core.urlresolvers&lt;/span&gt; &lt;span class=&quot;kn&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;reverse&lt;/span&gt;
&lt;span class=&quot;kn&quot;&gt;from&lt;/span&gt; &lt;span class=&quot;nn&quot;&gt;django.contrib.auth.models&lt;/span&gt; &lt;span class=&quot;kn&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;User&lt;/span&gt;


&lt;span class=&quot;k&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;Topic&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;models&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Model&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;):&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;title&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;models&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;CharField&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;max_length&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;200&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;create_time&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;models&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;DateTimeField&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;auto_now_add&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;bp&quot;&gt;True&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;create_user&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;models&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;ForeignKey&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;User&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;

    &lt;span class=&quot;k&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;__unicode__&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;bp&quot;&gt;self&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;):&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;bp&quot;&gt;self&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;title&lt;/span&gt;

    &lt;span class=&quot;k&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;get_absolute_url&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;bp&quot;&gt;self&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;):&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;reverse&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&amp;quot;interaction:detail&amp;quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;args&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;bp&quot;&gt;self&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;id&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;])&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;这里添加&lt;code&gt;get_absolute_url&lt;/code&gt;方法,是因为在&lt;code&gt;CreateView&lt;/code&gt;创建成功之后,
后重定向到&lt;code&gt;model&lt;/code&gt;的get_absolute_url所指向的地址,如果这里不实现该方法,
也是可以的,就需要在CreateView中给出&lt;code&gt;success_url&lt;/code&gt;属性,
或实现&lt;code&gt;get_success_url()&lt;/code&gt;方法,这三种方式是一样的作用,
就是指定创建成功之后的重定向的位置.&lt;/p&gt;

&lt;p&gt;然后是&lt;code&gt;views.py&lt;/code&gt;&lt;/p&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-python&quot; data-lang=&quot;python&quot;&gt;&lt;span class=&quot;c&quot;&gt;# -*- coding: utf-8 -*-&lt;/span&gt;
&lt;span class=&quot;kn&quot;&gt;from&lt;/span&gt; &lt;span class=&quot;nn&quot;&gt;django.views.generic&lt;/span&gt; &lt;span class=&quot;kn&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;
&lt;span class=&quot;kn&quot;&gt;from&lt;/span&gt; &lt;span class=&quot;nn&quot;&gt;models&lt;/span&gt; &lt;span class=&quot;kn&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;
&lt;span class=&quot;kn&quot;&gt;from&lt;/span&gt; &lt;span class=&quot;nn&quot;&gt;forms&lt;/span&gt; &lt;span class=&quot;kn&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;


&lt;span class=&quot;k&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;TopicCreateView&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;CreateView&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;):&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;model&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Topic&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;form_class&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;TopicForm&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;template_name_suffix&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&amp;#39;_create_form&amp;#39;&lt;/span&gt;

    &lt;span class=&quot;k&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;get_form_kwargs&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;bp&quot;&gt;self&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;):&lt;/span&gt;
        &lt;span class=&quot;c&quot;&gt;# add request for form to validate&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;kwargs&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;super&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;TopicCreateView&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;bp&quot;&gt;self&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;get_form_kwargs&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;kwargs&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;update&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;({&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&amp;quot;request&amp;quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;bp&quot;&gt;self&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;request&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;})&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;kwargs&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;在这里,重写了&lt;code&gt;get_form_kwargs&lt;/code&gt;,
是因为在下面的&lt;code&gt;forms.py&lt;/code&gt;中,&lt;code&gt;TopicForm&lt;/code&gt;需要用到&lt;code&gt;request&lt;/code&gt;,
所以这里就把&lt;code&gt;request&lt;/code&gt;放到其初始化方法中,
这样就可以在&lt;code&gt;forms.py&lt;/code&gt;中获取到当前用户
其中还用到了&lt;code&gt;form_class&lt;/code&gt;这个属性,用户指定创建时适用的表单.
这个类我是在&lt;code&gt;forms.py&lt;/code&gt;里面定义的,如下:&lt;/p&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-python&quot; data-lang=&quot;python&quot;&gt;&lt;span class=&quot;c&quot;&gt;# -*- coding: utf-8 -*-&lt;/span&gt;
&lt;span class=&quot;kn&quot;&gt;from&lt;/span&gt; &lt;span class=&quot;nn&quot;&gt;django&lt;/span&gt; &lt;span class=&quot;kn&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;forms&lt;/span&gt;
&lt;span class=&quot;kn&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;nn&quot;&gt;models&lt;/span&gt;


&lt;span class=&quot;k&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;TopicForm&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;forms&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;ModelForm&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;):&lt;/span&gt;

    &lt;span class=&quot;k&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;__init__&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;bp&quot;&gt;self&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;args&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;**&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;kwargs&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;):&lt;/span&gt;
        &lt;span class=&quot;c&quot;&gt;# 这里一定要用pop,而不是get,&lt;/span&gt;
        &lt;span class=&quot;c&quot;&gt;# 因为form的__init__方法并没有&amp;quot;request&amp;quot;这个参数&lt;/span&gt;
        &lt;span class=&quot;bp&quot;&gt;self&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;request&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;kwargs&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;pop&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&amp;quot;request&amp;quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;bp&quot;&gt;None&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
        &lt;span class=&quot;nb&quot;&gt;super&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;TopicForm&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;bp&quot;&gt;self&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;__init__&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;args&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;**&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;kwargs&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;

    &lt;span class=&quot;k&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;save&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;bp&quot;&gt;self&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;commit&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;bp&quot;&gt;True&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;):&lt;/span&gt;
        &lt;span class=&quot;bp&quot;&gt;self&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;instance&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;create_user&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;bp&quot;&gt;self&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;request&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;user&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;super&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;TopicForm&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;bp&quot;&gt;self&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;save&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;commit&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;bp&quot;&gt;True&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;

    &lt;span class=&quot;k&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;Meta&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;model&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;models&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Topic&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;fields&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&amp;#39;title&amp;#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;这里的&lt;code&gt;fields&lt;/code&gt;,是指定表单里要包含哪些信息,
因为&lt;code&gt;create_time&lt;/code&gt;是系统自动在创建时添加的,所以不需要.
而&lt;code&gt;create_user&lt;/code&gt;是因为我们要自动添加为当前用户,
所以也不需要,于是就只需要一个&lt;code&gt;title&lt;/code&gt;就够了.
这里重写了默认的&lt;code&gt;save&lt;/code&gt;方法,就是在这里,
我们把当前用户写入了当前的事例,成功的实现了目的.&lt;/p&gt;

&lt;p&gt;接着就是&lt;code&gt;templates&lt;/code&gt;了,
因为我们通过&lt;code&gt;template_name_suffix&lt;/code&gt;重新定义了其后缀,
所以我们的&lt;code&gt;templates&lt;/code&gt;如下,其名字为&lt;code&gt;topic_create_form.html&lt;/code&gt;&lt;/p&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-python&quot; data-lang=&quot;python&quot;&gt;&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;%&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;block&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;content&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;%&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
    &lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;form&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;action&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&amp;quot;&amp;quot;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;method&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&amp;quot;POST&amp;quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt;
        &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;%&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;csrf_token&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;%&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
        &lt;span class=&quot;p&quot;&gt;{{&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;form&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;as_p&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;}}&lt;/span&gt;
        &lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;input&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;type&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&amp;quot;submit&amp;quot;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;value&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&amp;quot;Create&amp;quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt;
    &lt;span class=&quot;o&quot;&gt;&amp;lt;/&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;form&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;%&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;endblock&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;%&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;最后是&lt;code&gt;urls.py&lt;/code&gt;&lt;/p&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-python&quot; data-lang=&quot;python&quot;&gt;&lt;span class=&quot;c&quot;&gt;# -*- coding: utf-8 -*-&lt;/span&gt;
&lt;span class=&quot;kn&quot;&gt;from&lt;/span&gt; &lt;span class=&quot;nn&quot;&gt;django.conf.urls&lt;/span&gt; &lt;span class=&quot;kn&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;url&lt;/span&gt;
&lt;span class=&quot;kn&quot;&gt;from&lt;/span&gt; &lt;span class=&quot;nn&quot;&gt;django.contrib.auth.decorators&lt;/span&gt; &lt;span class=&quot;kn&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;login_required&lt;/span&gt;
&lt;span class=&quot;kn&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;nn&quot;&gt;views&lt;/span&gt;

&lt;span class=&quot;n&quot;&gt;urlpatterns&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;url&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;R&amp;#39;^create_topic/$&amp;#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;login_required&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;views&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;TopicCreateView&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;as_view&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()),&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;name&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&amp;#39;create_topic&amp;#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;),&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;当然,这一切看上去比较简单,但是实际上从头开始操作还是有比较多的问题,
我也是整理了一个思维导图才搞懂这些&lt;code&gt;View&lt;/code&gt;,&lt;code&gt;model&lt;/code&gt;和&lt;code&gt;form&lt;/code&gt;之间的调用关系,
下面是这个思维导图的一个图片版本:&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/CreateView.png&quot; alt=&quot;CreateView.png&quot; /&gt;&lt;/p&gt;

</description>
                <link>http://shellbye.com/blog/tech_world/Django_CreateView_add_request_user/</link>
                <guid>http://shellbye.com/blog/tech_world/Django_CreateView_add_request_user</guid>
                <pubDate>Tue, 24 Nov 2015 00:00:00 +0800</pubDate>
        </item>

        <item>
                <title>Django Pagination</title>
                <description>&lt;p&gt;做过web开发的人一定对分页有一定的印象,就我个人而言,
一直是害怕分页的,因为我第一次接触分页时,那个记忆是比较痛苦的,
当时是师兄坐在我背后,他指挥着我写分页,而我那时又啥也不懂,
虽然最后通过这种方式懂了,但是这个过程还是让我心有余悸.
所以这也是我写技术博客的一个原因,很多技术很牛的人其实是不善于教别人的,
只有像我这种刚刚学会的人,才知道怎么去教别人.&lt;/p&gt;

&lt;p&gt;先说说为什么要分页,在刚开始学web开发时,很多人意识不到分页的重要性,
比如当初的我.觉得能把数据库里的东西拿出来,展示到网页上是一件非常牛逼的事,
其他的似乎都不重要了.但是很快的,你要遇到你人生当初的第一次”用户体验”,
所有数据一次加载出来是比较省事,但是体验不好.试想你去看书,书只有一页,
很长很长的一页,如果你一次看不完,那么第二次你就很难从上次终止的地方开始了.
所以分页就出现了.&lt;/p&gt;

&lt;p&gt;web中也是一样的道理,用户需要一部分一部分的看,这样比较方便查找,
而且从服务器的角度看,一点一点的返回数据,比一次性返回全部数据也压力更小,
而且也更节约带宽.&lt;/p&gt;

&lt;p&gt;说这么多废话是因为Django把分页已经写到非常简单的地步了,简单到我如果不说点废话,
那么这篇博客就真没啥东西了.&lt;a href=&quot;/blog/tech_world/django_ListView_DetailView_basic/&quot; target=&quot;_blank&quot;&gt;上一篇&lt;/a&gt;写了Django的ListView,
那么这篇就基于上篇写分页.&lt;/p&gt;

&lt;p&gt;首先是&lt;code&gt;views.py&lt;/code&gt;:&lt;/p&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-python&quot; data-lang=&quot;python&quot;&gt;&lt;span class=&quot;k&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;NewsList&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;ListView&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;):&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;model&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;News&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;paginate_by&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;2&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;相比与没有分页的情况,只是多了一个新的属性&lt;code&gt;paginate_by&lt;/code&gt;,
该属性用于指定每页所包含的对象个数.加了这一行代码之后,分页的&lt;code&gt;views.py&lt;/code&gt;部分就搞定了.
接下来是&lt;code&gt;templates&lt;/code&gt;里面的页面了:&lt;/p&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-python&quot; data-lang=&quot;python&quot;&gt;&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;%&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;is_paginated&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;%&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
        &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;%&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;page_obj&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;has_previous&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;%&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
            &lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;a&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;href&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&amp;quot;?page={{ page_obj.previous_page_number }}&amp;quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;previous&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;lt;/&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;a&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt;
        &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;%&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;endif&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;%&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;

        &lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;span&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;class&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&amp;quot;current&amp;quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt;
            &lt;span class=&quot;n&quot;&gt;Page&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{{&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;page_obj&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;number&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;}}&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;of&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{{&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;page_obj&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;paginator&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;num_pages&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;}}&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;
        &lt;span class=&quot;o&quot;&gt;&amp;lt;/&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;span&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt;

        &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;%&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;page_obj&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;has_next&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;%&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
            &lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;a&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;href&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&amp;quot;?page={{ page_obj.next_page_number }}&amp;quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;next&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;lt;/&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;a&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt;
        &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;%&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;endif&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;%&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;%&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;endif&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;%&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;这是需要添加的分页控件的代码,其中最主要的一个变量就是&lt;code&gt;page_obj&lt;/code&gt;,
它用来控制分页控件的前页和后页,以及是否又前一页后一页等.其中,
页数的名字”page”是可以自己在&lt;code&gt;views.py&lt;/code&gt;里通过&lt;code&gt;page_kwarg&lt;/code&gt;这个变量来自定义的.
分页的顺序也是可以通过&lt;code&gt;ordering&lt;/code&gt;来自己定义的,指定排序依据的field就可以.&lt;/p&gt;

</description>
                <link>http://shellbye.com/blog/tech_world/Django_Pagination/</link>
                <guid>http://shellbye.com/blog/tech_world/Django_Pagination</guid>
                <pubDate>Thu, 19 Nov 2015 00:00:00 +0800</pubDate>
        </item>

        <item>
                <title>Django ListView DetailView Basic</title>
                <description>&lt;p&gt;Django的class-based-view是基于function-based-view而言的,
其产生的原因是因为在网站开发的过程中,其实是有很多的共同的模式的.
比如今天要简单介绍的list-detail模式.很多的网页其实都包含这样的模式的,
比如我们拿BAT举例,百度的搜索结果页就是一个list,但是你点击某一个链接时,
你就进入到了的detail;淘宝也是一样,当你搜索”外套”时,出来的也都是list,
然后当你选中你想要细看的宝贝时,你也进入到了detail;QQ聊天就更明显了,
打开软件看到的是”好友列表”,然后想和谁聊天,双击,就进入了detail.&lt;/p&gt;

&lt;p&gt;在网站开发中,比如你要开发一个新闻网站,那么,首先你要有一个新闻列表页,
对应list,那么如果用function-based-view应该是这样写:&lt;/p&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-python&quot; data-lang=&quot;python&quot;&gt;&lt;span class=&quot;kn&quot;&gt;from&lt;/span&gt; &lt;span class=&quot;nn&quot;&gt;django.shortcuts&lt;/span&gt; &lt;span class=&quot;kn&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;render&lt;/span&gt;
&lt;span class=&quot;kn&quot;&gt;from&lt;/span&gt; &lt;span class=&quot;nn&quot;&gt;django.utils.safestring&lt;/span&gt; &lt;span class=&quot;kn&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;mark_safe&lt;/span&gt;

&lt;span class=&quot;k&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;index&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;request&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;):&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;news&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;News&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;objects&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;all&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;ret&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;s&quot;&gt;&amp;#39;news&amp;#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;news&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;render&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;request&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&amp;quot;news/index.html&amp;quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;ret&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;对应的&lt;code&gt;urls.py&lt;/code&gt;是这个样子:&lt;/p&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-python&quot; data-lang=&quot;python&quot;&gt;&lt;span class=&quot;kn&quot;&gt;from&lt;/span&gt; &lt;span class=&quot;nn&quot;&gt;django.conf.urls&lt;/span&gt; &lt;span class=&quot;kn&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;url&lt;/span&gt;
&lt;span class=&quot;kn&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;nn&quot;&gt;views&lt;/span&gt;

&lt;span class=&quot;n&quot;&gt;urlpatterns&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;url&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;r&amp;#39;^$&amp;#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;views&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;index&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;name&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&amp;#39;index&amp;#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;),&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;然后是具体的新闻页面,即detail,代码如下:&lt;/p&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-python&quot; data-lang=&quot;python&quot;&gt;&lt;span class=&quot;k&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;detail&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;request&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;news_id&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;):&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;news&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;News&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;objects&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;get&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;id&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;news_id&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;ret&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;s&quot;&gt;&amp;#39;title&amp;#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;mark_safe&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;news&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;title&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;),&lt;/span&gt;
        &lt;span class=&quot;s&quot;&gt;&amp;#39;content&amp;#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;mark_safe&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;news&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;content&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;),&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;render&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;request&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&amp;quot;news/detail.html&amp;quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;ret&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;&lt;code&gt;urls.py&lt;/code&gt;也就变成了这样:&lt;/p&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-python&quot; data-lang=&quot;python&quot;&gt;&lt;span class=&quot;kn&quot;&gt;from&lt;/span&gt; &lt;span class=&quot;nn&quot;&gt;django.conf.urls&lt;/span&gt; &lt;span class=&quot;kn&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;url&lt;/span&gt;
&lt;span class=&quot;kn&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;nn&quot;&gt;views&lt;/span&gt;

&lt;span class=&quot;n&quot;&gt;urlpatterns&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;url&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;r&amp;#39;^$&amp;#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;views&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;index&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;name&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&amp;#39;index&amp;#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;),&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;url&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;r&amp;#39;^detail/(?P&amp;lt;news_id&amp;gt;\d+)/$&amp;#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;views&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;detail&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;name&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&amp;#39;detail&amp;#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;),&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;代码量不算很大,但是假设现在要添加一个模块,叫新闻人物,
其逻辑基本上和新闻是一样的,也是list-detail模式,
你是不是就要ctrl+c然后ctrl+v然后把所有上面的”News”变成”People”?
这就是重复劳动了,怎么避免呢?万能的Django早已准备好了对付list-detail的类,
对于上面的代码,改造过程如下:&lt;/p&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-python&quot; data-lang=&quot;python&quot;&gt;&lt;span class=&quot;kn&quot;&gt;from&lt;/span&gt; &lt;span class=&quot;nn&quot;&gt;django.views.generic&lt;/span&gt; &lt;span class=&quot;kn&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;ListView&lt;/span&gt;
&lt;span class=&quot;kn&quot;&gt;from&lt;/span&gt; &lt;span class=&quot;nn&quot;&gt;django.views.generic&lt;/span&gt; &lt;span class=&quot;kn&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;DetailView&lt;/span&gt;

&lt;span class=&quot;k&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;NewsList&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;ListView&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;):&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;model&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;News&lt;/span&gt;

&lt;span class=&quot;k&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;NewsDetail&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;DetailView&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;):&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;model&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;News&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;&lt;code&gt;urls.py&lt;/code&gt;变成如下:&lt;/p&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-python&quot; data-lang=&quot;python&quot;&gt;&lt;span class=&quot;kn&quot;&gt;from&lt;/span&gt; &lt;span class=&quot;nn&quot;&gt;django.conf.urls&lt;/span&gt; &lt;span class=&quot;kn&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;url&lt;/span&gt;
&lt;span class=&quot;kn&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;nn&quot;&gt;views&lt;/span&gt;

&lt;span class=&quot;n&quot;&gt;urlpatterns&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;url&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;r&amp;#39;^list2/$&amp;#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;views&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;NewsList&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;as_view&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(),&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;name&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&amp;#39;index&amp;#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;),&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;url&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;r&amp;#39;^detail2/(?P&amp;lt;pk&amp;gt;[0-9]+)/$&amp;#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;views&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;NewsDetail&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;as_view&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(),&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;name&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&amp;#39;detail&amp;#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;),&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;这是是不是很简单了?整个list-detail的逻辑全部在Django内部解决了,
你只需要告诉Django你的list-detail主题model是谁就可以了.当然,
很多工作不是不需要做了,而是由Django替你做了,比如,&lt;code&gt;templates&lt;/code&gt;的指定,
Django为list默认去寻找&lt;code&gt;templates/app_name/model_name_list.html&lt;/code&gt;,
为detail默认去寻找&lt;code&gt;templates/app_name/model_name_detail.html&lt;/code&gt;.
而且这也是可以改变的,你可以通过类的&lt;code&gt;template_name&lt;/code&gt;属性来设置,
如下:&lt;/p&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-python&quot; data-lang=&quot;python&quot;&gt;&lt;span class=&quot;kn&quot;&gt;from&lt;/span&gt; &lt;span class=&quot;nn&quot;&gt;django.views.generic&lt;/span&gt; &lt;span class=&quot;kn&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;ListView&lt;/span&gt;
&lt;span class=&quot;kn&quot;&gt;from&lt;/span&gt; &lt;span class=&quot;nn&quot;&gt;django.views.generic&lt;/span&gt; &lt;span class=&quot;kn&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;DetailView&lt;/span&gt;

&lt;span class=&quot;k&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;NewsList&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;ListView&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;):&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;model&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;News&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;template_name&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&amp;quot;my_own_templates.html&amp;quot;&lt;/span&gt;

&lt;span class=&quot;k&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;NewsDetail&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;DetailView&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;):&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;model&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;News&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;context_object_name&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&amp;#39;the_news&amp;#39;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;上面的&lt;code&gt;context_object_name&lt;/code&gt;是&lt;code&gt;view&lt;/code&gt;传给&lt;code&gt;templates&lt;/code&gt;的变量名,
默认是&lt;code&gt;model_name_list&lt;/code&gt;和&lt;code&gt;model_name&lt;/code&gt;,可以通过这个属性自定义.&lt;/p&gt;

&lt;p&gt;其实,还可以更简单点:那就是只有&lt;code&gt;urls.py&lt;/code&gt;:&lt;/p&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-python&quot; data-lang=&quot;python&quot;&gt;&lt;span class=&quot;kn&quot;&gt;from&lt;/span&gt; &lt;span class=&quot;nn&quot;&gt;django.conf.urls&lt;/span&gt; &lt;span class=&quot;kn&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;url&lt;/span&gt;
&lt;span class=&quot;kn&quot;&gt;from&lt;/span&gt; &lt;span class=&quot;nn&quot;&gt;django.views.generic&lt;/span&gt; &lt;span class=&quot;kn&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;ListView&lt;/span&gt;
&lt;span class=&quot;kn&quot;&gt;from&lt;/span&gt; &lt;span class=&quot;nn&quot;&gt;django.views.generic&lt;/span&gt; &lt;span class=&quot;kn&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;DetailView&lt;/span&gt;
&lt;span class=&quot;kn&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;nn&quot;&gt;models&lt;/span&gt;
&lt;span class=&quot;kn&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;nn&quot;&gt;views&lt;/span&gt;

&lt;span class=&quot;n&quot;&gt;urlpatterns&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;url&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;r&amp;#39;^list3/$&amp;#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;ListView&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;as_view&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;model&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;models&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;News&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;),&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;name&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&amp;#39;index&amp;#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;),&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;url&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;r&amp;#39;^detail3/(?P&amp;lt;pk&amp;gt;[0-9]+)/$&amp;#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;DetailView&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;as_view&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;model&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;models&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;News&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;),&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;name&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&amp;#39;detail&amp;#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;),&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;这样连&lt;code&gt;views.py&lt;/code&gt;都不需要了,当你需要新的新闻人物时,你需要做的就是添加如下两行就可以了:&lt;/p&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-python&quot; data-lang=&quot;python&quot;&gt;&lt;span class=&quot;n&quot;&gt;url&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;r&amp;#39;^list4/$&amp;#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;ListView&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;as_view&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;model&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;models&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;People&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;),&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;name&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&amp;#39;p-index&amp;#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;),&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;url&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;r&amp;#39;^detail4/(?P&amp;lt;pk&amp;gt;[0-9]+)/$&amp;#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;DetailView&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;as_view&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;model&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;models&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;People&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;),&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;name&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&amp;#39;p-detail&amp;#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;),&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;是不是很简洁呢?&lt;/p&gt;
</description>
                <link>http://shellbye.com/blog/tech_world/django_ListView_DetailView_basic/</link>
                <guid>http://shellbye.com/blog/tech_world/django_ListView_DetailView_basic</guid>
                <pubDate>Wed, 18 Nov 2015 00:00:00 +0800</pubDate>
        </item>

        <item>
                <title>django static_url</title>
                <description>&lt;p&gt;好久没有接触Django开发了,虽然之前用过很久,但是因为Python的工作机会不是很多,
于是找工作期间主要复习Java,Django和Python都放下太久了.有意思的是,
尽管我找工作期间一直在复习Java,可是最后签约的&lt;a href=&quot;http://www.100tal.com/&quot; target=&quot;_blank&quot;&gt;好未来&lt;/a&gt;却恰恰需要的是我的Python+Django技能.
这不,又开始重新拾起Django,第一天就遇到一个问题.&lt;/p&gt;

&lt;p&gt;为了加载静态文件,Django的默认&lt;code&gt;settings.py&lt;/code&gt;里已经预设了如下配置:&lt;/p&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-python&quot; data-lang=&quot;python&quot;&gt;&lt;span class=&quot;c&quot;&gt;# Static files (CSS, JavaScript, Images)&lt;/span&gt;
&lt;span class=&quot;c&quot;&gt;# https://docs.djangoproject.com/en/1.8/howto/static-files/&lt;/span&gt;

&lt;span class=&quot;n&quot;&gt;STATIC_URL&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&amp;#39;/static/&amp;#39;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;然后我的项目根目录的&lt;code&gt;templates&lt;/code&gt;里面,有如下的html语句(&lt;code&gt;base.html&lt;/code&gt;):&lt;/p&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-html&quot; data-lang=&quot;html&quot;&gt;{% load staticfiles %}
&lt;span class=&quot;c&quot;&gt;&amp;lt;!-- 其他html语句 --&amp;gt;&lt;/span&gt;
&lt;span class=&quot;nt&quot;&gt;&amp;lt;script &lt;/span&gt;&lt;span class=&quot;na&quot;&gt;type=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&amp;quot;text/javascript&amp;quot;&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;src=&lt;/span&gt;&lt;span class=&quot;err&quot;&gt; &lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&amp;quot;{% static &amp;quot;&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;jquery-1&lt;/span&gt;&lt;span class=&quot;err&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;11&lt;/span&gt;&lt;span class=&quot;err&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;3&lt;/span&gt;&lt;span class=&quot;err&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;js&lt;/span&gt;&lt;span class=&quot;err&quot;&gt;&amp;quot;&lt;/span&gt; &lt;span class=&quot;err&quot;&gt;%}&amp;quot;&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&amp;gt;&amp;lt;/script&amp;gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;&lt;code&gt;jquery-1.11.3.js&lt;/code&gt;这个文件是在&lt;code&gt;static&lt;/code&gt;目录中,
但是直接在浏览器访问&lt;code&gt;http://127.0.0.1:8000/static/jquery-1.11.3.js&lt;/code&gt;,
却总是404,最后查看&lt;a href=&quot;https://docs.djangoproject.com/en/1.8/howto/static-files/&quot; target=&quot;_blank&quot;&gt;官方文档&lt;/a&gt;,才意识到原来是自己没有设置&lt;code&gt;STATICFILES_DIRS&lt;/code&gt;,
倒置Django不知道哪里去找静态文件,所以404,于是在&lt;code&gt;settings.py&lt;/code&gt;里加了如下语句就可以正常工作了:&lt;/p&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-python&quot; data-lang=&quot;python&quot;&gt;&lt;span class=&quot;n&quot;&gt;STATICFILES_DIRS&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;os&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;path&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;join&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;BASE_DIR&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&amp;quot;static&amp;quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;),&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;那么,问题是,为啥官方文档没有直接把&lt;code&gt;STATICFILES_DIRS&lt;/code&gt;设置好呢?仔细看了下官方文档,
发现其实这个&lt;code&gt;static&lt;/code&gt;目录并不是为整个项目服务的,即根目录的&lt;code&gt;templates&lt;/code&gt;是无法自动识别
&lt;code&gt;static&lt;/code&gt;目录的,这个目录其实是为单独的app服务的,即该目录是应该放在app目录下,
与&lt;code&gt;migrations&lt;/code&gt;和目录级别的&lt;code&gt;templates&lt;/code&gt;服务的,在这种情况下,就不需要&lt;code&gt;STATICFILES_DIRS&lt;/code&gt;这个设置了.
那么,&lt;code&gt;STATICFILES_DIRS&lt;/code&gt;是为什么设置的呢?官网如是说:&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;Your project will probably also have static assets that aren’t tied to a particular app.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;即不是服务与单独的app的,而是类似&lt;code&gt;jquery&lt;/code&gt;这种是服务于整个项目的静态文件,才需要用到.&lt;/p&gt;

&lt;p&gt;那么,如果我设置了&lt;code&gt;STATICFILES_DIRS&lt;/code&gt;为某目录,比如&lt;code&gt;static01&lt;/code&gt;,其中有img.jpg,
又在app的&lt;code&gt;static&lt;/code&gt;目录下也有img.jpg,那么,会加载哪个文件呢?&lt;/p&gt;

&lt;p&gt;根据&lt;a href=&quot;https://docs.djangoproject.com/en/1.8/ref/settings/#std:setting-STATICFILES_FINDERS&quot; target=&quot;_blank&quot;&gt;&lt;code&gt;STATICFILES_FINDERS&lt;/code&gt;&lt;/a&gt;的默认设置,是会优先从&lt;code&gt;STATICFILES_DIRS&lt;/code&gt;中寻找的.&lt;/p&gt;

</description>
                <link>http://shellbye.com/blog/tech_world/django_static_url/</link>
                <guid>http://shellbye.com/blog/tech_world/django_static_url</guid>
                <pubDate>Tue, 17 Nov 2015 20:23:08 +0800</pubDate>
        </item>

        <item>
                <title>java explore note</title>
                <description>&lt;blockquote&gt;
  &lt;p&gt;下面是在读InfoQ的迷你书的一些笔记，原书见这里：
&lt;a href=&quot;http://www.infoq.com/cn/minibooks/java-explore&quot; target=&quot;_blank&quot;&gt;http://www.infoq.com/cn/minibooks/java-explore&lt;/a&gt;&lt;/p&gt;
&lt;/blockquote&gt;

&lt;ol&gt;
  &lt;li&gt;
    &lt;p&gt;Java 类的加载&lt;br /&gt;
Java类的加载是由类加载器来完成的。
一般来说,类加载器分成两类:启动类加载器(bootstrap)和用户自定义的类加载器(user-defined)。
两者的区别在于启动类 加载器是由JVM的原生代码实现的,
而用户自定义的类加载器都继承自Java中 的 java.lang.ClassLoader类&lt;br /&gt;
类加载器需要完成的最终功能是定义一个Java类,即把Java字节代码转换成JVM中的 java.lang.Class类的对象&lt;br /&gt;
类加载器的一个重要用途是在JVM中为相同名称的Java类创建隔离空间。
在JVM中, 判断两个类是否相同,不仅是根据该类的 二进制名称 ,还需要根据两个类的定义类 加载器。
只有两者完全一样,才认为两个类的是相同的  &lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;Java 类的链接&lt;br /&gt;
Java类的链接指的是将Java类的二进制代码合并到JVM的运行状态之中的过程&lt;br /&gt;
类的链接包括验证、准备和解析等几个步骤。&lt;br /&gt;
1.验证是用来确保Java类的二进制表示在结构上是完全正确的。如果验证过程出现错误 的话,会抛出 java.lang.VerifyError错误。&lt;br /&gt;
2.准备过程则是创建Java类中的静态域,并将 这些域的值设为默认值。准备过程并不会执行代码。&lt;br /&gt;
在一个Java类中会包含对其它 类或接口的形式引用,包括它的父类、所实现的接口、方法的形式参数和返回值的 Java类等。&lt;br /&gt;
3.解析的过程就是确保这些被引用的类能被正确的找到。解析的过程可能 会导致其它的 Java类被加载。  &lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;Java 类的初始化&lt;br /&gt;
当一个 Java 类第一次被真正使用到的时候,JVM 会进行该类的初始化操作。
初始化 过程的主要操作是执行静态代码块和初始化静态域  &lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;可见性&lt;br /&gt;
在多线程程序中,如果不使用一定的同步机制,就不能保证一个线程所写入的值对另 外一个线程是可见的。
造成这种情况的原因可能有下面几个:&lt;br /&gt;
1.CPU 内部的缓存:现在的 CPU 一般都拥有层次结构的几级缓存。
CPU 直接操作 的是缓存中的数据,并在需要的时候把缓存中的数据与主存进行同步。
因此在 某些时刻,缓存中的数据与主存内的数据可能是不一致的。
某个线程所执行的 写入操作的新值可能当前还保存在 CPU 的缓存中,
还没有被写回到主存中。这 个时候,另外一个线程的读取操作读取的就还是主存中的旧值。&lt;br /&gt;
2.CPU 的指令执行顺序:在某些时候,CPU 可能改变指令的执行顺序。
这有可能 导致一个线程过早的看到另外一个线程的写入操作完成之后的新值。&lt;br /&gt;
3.编译器代码重排:出于性能优化的目的,编译器可能在编译的时候对生成的目 标代码进行重新排列。  &lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;类型系统&lt;br /&gt;
通过继承机制而产生的类型体系结构，根据 Liskov替换原则 ,子类是可以替换父类的。
当需要Object类的引用的 时候,如果传入一个String对象是没有任何问题的。
但是反过来的话,即用父类的引 用替换子类引用 的时候,就需要进行强制类型转换&lt;br /&gt;
引入泛型之后的类型系统增加了两个维度:一个是类型参数自身的继承体系结构, 
另外一个是泛型类或接口自身的继承体系结构。
第一个指的是对于 List&lt;string&gt;和 List&lt;object&gt;这样的情况,
类型参数 String 是继承自 Object 的。
而第二种指的是 List 接口继承自 Collection 接口。
对于这个类型系统,有如下的一些规则:  
1.相同类型参数的泛型类的关系取决于泛型类自身的继承体系结构。
即 List&lt;string&gt; 是 Collection&lt;string&gt; 的 子 类 型 , 
List&lt;string&gt; 可 以 替 换 Collection&lt;string&gt;。
这种情况也适用于带有上下界的类型声明  
2.当泛型类的类型声明中使用了通配符的时候,其子类型可以在两个维度上分别 展开。
如对 Collection&amp;lt;? extends Number&amp;gt;来说,
其子类型可以在 Collection 这个 维度上展开,即 List&amp;lt;? extends Number&amp;gt;和 Set&amp;lt;? extends Number&amp;gt;等;
也可以在 Number 这个层次上展开,即 Collection&lt;double&gt;和 Collection&lt;integer&gt;等。
如此 循环下去,ArrayList&lt;long&gt;和 HashSet&lt;double&gt;等也都算是 Collection&amp;lt;? extends Number&amp;gt;的子类型  &lt;/double&gt;&lt;/long&gt;&lt;/integer&gt;&lt;/double&gt;&lt;/string&gt;&lt;/string&gt;&lt;/string&gt;&lt;/string&gt;&lt;/object&gt;&lt;/string&gt;&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;由于类型擦除机制,类型参 数并不能用来创建对象或是作为静态变量的类型  &lt;/p&gt;
  &lt;/li&gt;
&lt;/ol&gt;

</description>
                <link>http://shellbye.com/blog/tech_world/java-explore-note/</link>
                <guid>http://shellbye.com/blog/tech_world/java-explore-note</guid>
                <pubDate>Mon, 12 Oct 2015 19:27:08 +0800</pubDate>
        </item>

        <item>
                <title>TCP/IP 详解 笔记</title>
                <description>&lt;ol&gt;
  &lt;li&gt;
    &lt;p&gt;TCP/IP协议族的四个层次&lt;br /&gt;
应用层：Telnet、FTP和e-mail等。负责处理特定的应用程序的细节&lt;br /&gt;
运输层：TCP和UDP。主要为两台主机上的应用程序提供端到端的通信&lt;br /&gt;
网络层：IP、ICMP和IGMP。处理分组在网络中的活动，例如分组的选路&lt;br /&gt;
链路层：设备驱动程序及接口卡。通常包括操作系统中的设备驱动程序和计算机中对应的网络接口卡。
他们一起处理与电缆（或其它任何传输媒介）的物理接口细节。  &lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;在TCP/IP协议族中，网络层IP提供的是一种不可靠服务。也就是说，
它只是尽可能快的把分组从源节点送到目的节点，但是不提供任何可靠性保证。
而另一方面，TCP在不可靠的IP层上提供了可靠的运输层。为了提供这种可靠的服务，
TCP采用了超时重传、发送和接收端到端的确认分组信息等机制。由此可见，
运输层和网络层分别负责不同的功能。  &lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;在TCP/IP协议族中，链路层主要有三个目的：&lt;br /&gt;
1）为IP模块发送和接收IP数据报&lt;br /&gt;
2）为ARP模块发送ARP请求和接收ARP应答&lt;br /&gt;
3）为RARP发送RARP请求和接收RARP应答  &lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;以太网和IEEEE 802封装&lt;br /&gt;
两者都是局域网技术，以太网是TCP/IP采用的主要技术。&lt;br /&gt;
两者的差别体现在不同的封装格式：  &lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;SLIP&lt;br /&gt;
SLIP的全称是Serial Line IP（串行线路IP）。它是一种在串行线路上对IP数据报进行封装的简单形式，
在RFC 1055中有详细的描述。  &lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;PPP：点对点协议&lt;br /&gt;
PPP比SLIP具有以下优点：&lt;br /&gt;
1）PPP支持在单根串行线路上运行多种协议，不只是IP协议&lt;br /&gt;
2）每一帧都有循环冗余校验&lt;br /&gt;
3）通信双方可以进行IP地址的动态协商（使用IP网络控制协议）&lt;br /&gt;
4）与CSLIP（压缩的SLIP）类似，对TCP和IP报文首部进行压缩&lt;br /&gt;
5）链路层控制协议可以对多个数据链路选项进行设置&lt;br /&gt;
为这些优点付出的代价是在每一帧的首部增加三个字节  &lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;环回接口（Loopback interface）&lt;br /&gt;
大多数产品都支持环回接口，已允许运行在同一台主机上的客户程序和服务程序通过TCP/IP进行通行。
A类网络号127就是为环回接口预留的。大多数系统把IP地址127.0.0.1分配给这个接口，并命名为localhost。
一个传给环回接口的IP数据报不能在任何网络上出现。  &lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;最大传输单元MTU&lt;br /&gt;
网络： MTU字节&lt;br /&gt;
以太网：1500&lt;br /&gt;
IEEE 802.3/802.2：1492  &lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;路径MTU&lt;br /&gt;
如果两台主机之间的通行要通过多个网络，那么每个网络的链路层就可能有不同的MTU，
其中最小的MTU被称作路径MTU  &lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;IP首部&lt;br /&gt;
1）4位版本：目前的协议版本号是4，因此IP有时也称为IPv4&lt;br /&gt;
2）4位首部长度：首部长度指的是占32bit字的数目，由于它是一个4比特字段，因此首部长度最长为60个字节。&lt;br /&gt;
3）8位服务类型（TOS）：服务类型字段包括一个3bit的优先权子字段（已忽略），
4bit的TOS子字段和1bit未用位但必须置为0. 4bit的TOS分别代表：最小时延、最大吞吐、最高可靠性和最小费用。&lt;br /&gt;
4）16位总长度（字节数）：指整个IP数据报的长度，以字节为单位。利用首部长度字段和总长度字段，
就可以知道IP数据报中数据内存的起始位置和长度。
该字段是必要内容，因为一些数据链路（如以太网）需要填充一些数据以达到最小长度&lt;br /&gt;
5）16位标识：标识字段唯一的标识主机发送的每一份数据报&lt;br /&gt;
6）3位标志：&lt;br /&gt;
7）13位偏移：&lt;br /&gt;
8）8位生存时间（TTL）：该字段设置了数据报可以经过的最多路由器数。它指定了数据报的生存时间。
TTL的初始值由源主机设置（通常为32或64），一旦经过一个处理它的路由器，它的值就减去1.
当该字段的值为0时，数据报就被丢弃，并发送ICMP报文通知源主机。&lt;br /&gt;
9）8位协议：该位被用来对数据报进行分用&lt;br /&gt;
10）16位首部校验和：是根据IP首部计算的检验和。它不对首部后面的数据进行计算。&lt;br /&gt;
11）32位源IP地址：&lt;br /&gt;
12）32位目的IP地址：&lt;br /&gt;
13）选项（如果有）：&lt;br /&gt;
14）数据：  &lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;IP路由选择：&lt;br /&gt;
IP路由选择主要完成以下功能：&lt;br /&gt;
1）搜索路由表，寻找能与目的IP地址完全匹配的表目，如果找到，
则把该报文发送给该表目所指定的下一站路由器或直接连接的网络端口&lt;br /&gt;
2）搜索路由表，寻找能与目的网络号匹配的表目，找到同上&lt;br /&gt;
3）搜索路由表，寻找标为“默认（default）”的表目，找到同上  &lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;子网掩码&lt;br /&gt;
子网掩码是一个32bit的值，其中值为1的比特留给网络号和子网号，为0的留给主机号  &lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;ARP：地址解析协议&lt;br /&gt;
ARP的功能：从逻辑Internet地址到对应的物理硬件地址进行翻译&lt;br /&gt;
ARP高效运行的关键是由于每个主机上都有一个ARP高速缓存，一般的生存时间为20分钟。  &lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;RARP：逆地址解析协议&lt;br /&gt;
RARP协议是许多无盘系统在引导时用来获取IP地址的。其在概念上比较简单，但是其服务的实现却与系统息息相关  &lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;ICMP：Internet控制报文协议&lt;br /&gt;
ICMP经常被认为是IP层的一个组成部分。它传递差错报文以及其他需要注意的信息。
ICMP报文通常被IP层或更高层协议（TCP或UDP）使用，它是在IP数据报内部被传输的。&lt;br /&gt;
下面各种情况都不会导致产生ICMP差错报文：&lt;br /&gt;
1）ICMP差错报文&lt;br /&gt;
2）目的地址是广播地址或多播地址的IP数据报&lt;br /&gt;
3）作为链路层广播的数据报&lt;br /&gt;
4）不是IP分组的第一片&lt;br /&gt;
5）源地址不是单个主机的数据报  &lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;ICMP的各种类型报文有：&lt;br /&gt;
1）ICMP地址掩码请求与应答：用于无盘系统在引导过程中获取自己的子网掩码&lt;br /&gt;
2）ICMP时间戳请求与应答：用于想另一个系统查询当前的时间（午夜开始的毫秒数，无日期）&lt;br /&gt;
3）ICMP端口不可达差错  &lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;Ping程序&lt;br /&gt;
Ping程序的目的是为了测试另一台主机是否可达。
该程序发送一份ICMP回显请求报文给主机，并等待返回ICMP回显应答。&lt;br /&gt;
Ping程序是对两个TCP/IP系统连通性进行测试的基本工具。
它只利用ICMP回显请求和回显应答报文，而不用经过传输层（TCP/UDP）。
Ping服务器一般在内核中实现ICMP的功能。  &lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;Traceroute程序&lt;br /&gt;
在一个TCP/IP网络中，traceroute程序时不可缺少的工具。
其操作很简单：开始时发送一个TTL字段为1的UDP数据报，
然后将TTL字段每次加1，已确定路径中的每个路由器。
每个路由器在丢弃UDP数据报时都返回一个ICMP超时报文，
而最终目的主机则产生一个ICMP端口不可达报文。  &lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;IP选路&lt;br /&gt;
IP路由操作对于运行TCP/IP的系统来说是最基本的，不管是主机还是路由器。
路由表项的内容很简单，包括：5bit标志、目的IP地址（主机、网络或默认）、
下一站路由器的IP地址（间接路由）或者本地接口的IP地址（直接路由）及指向本地接口的指针。
主机表项比网络表项具有更高的优先级，而网络表项比默认项具有更高的优先级。&lt;br /&gt;
系统产生的或转发的每份IP数据报都要搜索路由表，
它可以被路由守护进程或ICMP重定向报文修改。
系统在默认情况下不转发数据报，除非进行特殊的配置。
可以用route命令添加静态路由，也可以利用新ICMP路由器发现报文来初始化和动态更新默认表项。
主机在启动时可以只有一个简单的路由表，然后使用来自默认路由器的ICMP重定向报文进行动态更新  &lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;动态选路协议&lt;br /&gt;
有两种基本的选路协议，即用于同一自治系统各路由器之间的内部网关协议（IGP）
和用于不同自治系统内路由器通信的外部网关协议（EGP）&lt;br /&gt;
最常用的IGP是路由信息协议（RIP），而OSPF是一个正在得到广泛使用的新IGP。&lt;br /&gt;
1）RIP：选路信息协议（Routing Information Protocol）&lt;br /&gt;
RIP报文包含在UDP数据报中。其报文格式如下：&lt;br /&gt;
命令字段：1表示请求，2表示应答，3，4舍弃不用，
两个非正式的命令：轮询（5）和轮询表项（6）。请求表示要求其他系统发送其全部或部分路由表。
应答则包含发送者全部或部分路由表&lt;br /&gt;
版本字段：通常为1，第二版为2&lt;br /&gt;
紧跟在后面的20字节指定地址系列、IP地址以及相应的度量。
采用这种20字节格式的RIP报文可以通告多达25条路由。&lt;br /&gt;
2）OSPF：开发最短路径优先&lt;br /&gt;
3）BGP：边界网关协议  &lt;/p&gt;
  &lt;/li&gt;
&lt;/ol&gt;

</description>
                <link>http://shellbye.com/blog/tech_world/TCP:IP-Illustrated-note/</link>
                <guid>http://shellbye.com/blog/tech_world/TCP:IP-Illustrated-note</guid>
                <pubDate>Wed, 30 Sep 2015 19:27:08 +0800</pubDate>
        </item>

        <item>
                <title>Java I/O 和 NIO</title>
                <description>&lt;ol&gt;
  &lt;li&gt;
    &lt;p&gt;io分类：&lt;br /&gt;
基于字节操作的io接口：InputStream 和 OutputStream&lt;br /&gt;
基于字符操作的io接口：Writer 和 Reader&lt;br /&gt;
数据的传输方式，也就是数据写到哪里的问题，主要是以下两种：&lt;br /&gt;
基于磁盘操作的io接口：File&lt;br /&gt;
基于网络操作的io接口：Socket&lt;br /&gt;
参考：&lt;a href=&quot;http://www.cnblogs.com/zhuYears/archive/2013/04/10/2993292.html&quot; target=&quot;_blank&quot;&gt;1&lt;/a&gt;  &lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;nio带来了什么：&lt;br /&gt;
1）面向块的I/O&lt;br /&gt;
传统JavaIO是面向流的I/O。流I/O一次处理一个字节。NIO则是面向块的I/O，每次操作都是以数据块为单位。
NIO中引入了缓冲区（Buffer）的概念，缓冲区作为传输数据的基本单位块，所有对数据的操作都是基于将数据移进/移出缓冲区而来；
读数据的时候从缓冲区中取，写的时候将数据填入缓冲区。尽管传统JavaIO中也有相应的缓冲区过滤器流（BufferedInputStream等），
但是移进/移出的操作是由程序员来包装的，它本质是对数据结构化和积累达到处理时的方便，并不是一种提高I/O效率的措施。
NIO的缓冲区则不然，对缓冲区的移进/移出操作是由底层操作系统来实现的。通常一次缓冲区操作是这样的：某个进程需要进行I/O操作，
它执行了一次读（read）或者写(write)的系统调用，向底层操作系统发出了请求，操作系统会按要求把数据缓冲区填满或者排干。
说起来简单，其实很复杂。但至少我们知道了这事是由操作系统干的，比我们代码级的实现要高效的多。
除了效率上的差别外，缓冲区在数据分析和处理上也带来的很大的便利和灵活性。&lt;br /&gt;
2）非阻塞的I/O + 就绪性选择&lt;br /&gt;
传统JavaIO是基于阻塞I/O模型的：当发起一个I/O请求时，如果数据没有准备好（read时无可读数据，write时数据不可写入），
那么线程便会阻塞，直到数据准备好，导致线程大部分的时间都在阻塞。
而非阻塞I/O则允许线程在有数据的时候处理数据，没有数据的时候干点别的，提高了资源利用率。
就绪性选择通常是建立在非阻塞的基础上，并且更进一步，它把检查哪些I/O请求的数据准备好这个任务交给了底层操作系统，
操作系统会去查看并返回结果集合，这样我们只需要关心那些准备好进行操作的IO通道。&lt;br /&gt;
3）文件锁定和内存映射文件等操作系统特性&lt;br /&gt;
NIO同时带来了很多当今操作系统大都支持的特性。
文件锁定是多个进程协同工作的情况下，要协调进程间对共享数据的访问必不可少的工具。
内存映射利用虚拟内存技术提供对文件的高速缓存，使读取磁盘文件就像从内存中读取一样高效，
但是却不会有内存泄漏的危险，因为在内存中不会存在文件的完整拷贝。&lt;br /&gt;
参考：&lt;a href=&quot;http://www.cnblogs.com/zhuYears/p/3166571.html&quot; target=&quot;_blank&quot;&gt;1&lt;/a&gt;  &lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;nio和io的差异：&lt;br /&gt;
1)&lt;a href=&quot;http://www.codeceo.com/article/java-nio-io.html&quot; target=&quot;_blank&quot;&gt;面向流与面向缓冲&lt;/a&gt;&lt;br /&gt;
Java NIO和IO之间第一个最大的区别是，IO是面向流的，NIO是面向缓冲区的。
Java IO面向流意味着每次从流中读一个或多个字节，直至读取所有字节，它们没有被缓存在任何地方。
此外，它不能前后移动流中的数据。如果需要前后移动从流中读取的数据，需要先将它缓存到一个缓冲区。
Java NIO的缓冲导向方法略有不同。数据读取到一个它稍后处理的缓冲区，需要时可在缓冲区中前后移动。
这就增加了处理过程中的灵活性。但是，还需要检查是否该缓冲区中包含所有您需要处理的数据。
而且，需确保当更多的数据读入缓冲区时，不要覆盖缓冲区里尚未处理的数据。&lt;br /&gt;
2)阻塞与非阻塞IO
Java IO的各种流是阻塞的。这意味着，当一个线程调用read() 或 write()时，该线程被阻塞，
直到有一些数据被读取，或数据完全写入。该线程在此期间不能再干任何事情了。 
Java NIO的非阻塞模式，使一个线程从某通道发送请求读取数据，但是它仅能得到目前可用的数据，
如果目前没有数据可用时，就什么都不会获取。而不是保持线程阻塞，所以直至数据变的可以读取之前，
该线程可以继续做其他的事情。 非阻塞写也是如此。一个线程请求写入一些数据到某通道，
但不需要等待它完全写入，这个线程同时可以去做别的事情。 
线程通常将非阻塞IO的空闲时间用于在其它通道上执行IO操作，所以一个单独的线程现在可以管理多个输入和输出通道（channel）。&lt;br /&gt;
参考：&lt;br /&gt;
&lt;a href=&quot;http://www.yangyong.me/java-nio%E5%85%A5%E9%97%A8%E4%B8%8E%E8%AF%A6%E8%A7%A3/&quot; target=&quot;_blank&quot;&gt;1&lt;/a&gt;  &lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;通道和缓冲区&lt;br /&gt;
通道 和 缓冲区 是 NIO 中的核心对象，几乎在每一个 I/O 操作中都要使用它们。
通道是对原 I/O 包中的流的模拟。到任何目的地(或来自任何地方)的所有数据都必须通过一个 Channel 对象。
一个 Buffer 实质上是一个容器对象。发送给一个通道的所有对象都必须首先放到缓冲区中；
同样地，从通道中读取的任何数据都要读到缓冲区中。&lt;br /&gt;
1)缓冲区&lt;br /&gt;
Buffer 是一个对象，它包含一些要写入或者刚读出的数据。 
在 NIO 中加入 Buffer 对象，体现了新库与原 I/O 的一个重要区别。
在面向流的 I/O 中，您将数据直接写入或者将数据直接读到 Stream 对象中。
在 NIO 库中，所有数据都是用缓冲区处理的。在读取数据时，它是直接读到缓冲区中的。
在写入数据时，它是写入到缓冲区中的。任何时候访问 NIO 中的数据，您都是将它放到缓冲区中。
缓冲区实质上是一个数组。通常它是一个字节数组，但是也可以使用其他种类的数组。
但是一个缓冲区不 仅仅 是一个数组。缓冲区提供了对数据的结构化访问，而且还可以跟踪系统的读/写进程。&lt;br /&gt;
缓冲区类型：最常用的缓冲区类型是 ByteBuffer。
一个 ByteBuffer 可以在其底层字节数组上进行 get/set 操作(即字节的获取和设置)。
每一个 Buffer 类都是 Buffer 接口的一个实例。 除了 ByteBuffer，每一个 Buffer 类都有完全一样的操作，
只是它们所处理的数据类型不一样。因为大多数标准 I/O 操作都使用 ByteBuffer，
所以它具有所有共享的缓冲区操作以及一些特有的操作。&lt;br /&gt;
2)通道&lt;br /&gt;
Channel是一个对象，可以通过它读取和写入数据。拿 NIO 与原来的 I/O 做个比较，通道就像是流。
正如前面提到的，所有数据都通过 Buffer 对象来处理。您永远不会将字节直接写入通道中，
相反，您是将数据写入包含一个或者多个字节的缓冲区。同样，您不会直接从通道中读取字节，
而是将数据从通道读入缓冲区，再从缓冲区获取这个字节。&lt;br /&gt;
通道类型&lt;br /&gt;
通道与流的不同之处在于通道是双向的。
而流只是在一个方向上移动(一个流必须是 InputStream 或者 OutputStream 的子类)， 
而 通道 可以用于读、写或者同时用于读写。因为它们是双向的，所以通道可以比流更好地反映底层操作系统的真实情况。
特别是在 UNIX 模型中，底层操作系统通道是双向的。  &lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;从文件中读取&lt;br /&gt;
在 NIO 系统中，任何时候执行一个读操作，您都是从通道中读取，但是您不是 直接 从通道读取。
因为所有数据最终都驻留在缓冲区中，所以您是从通道读到缓冲区中。因此读取文件涉及三个步骤：
1) 从 FileInputStream 获取 Channel：
&lt;code&gt;FileInputStream fin = new FileInputStream( &quot;readandshow.txt&quot; );
FileChannel fc = fin.getChannel();&lt;/code&gt;&lt;br /&gt;
2) 创建(缓冲区)Buffer：&lt;code&gt;ByteBuffer buffer = ByteBuffer.allocate( 1024 );&lt;/code&gt;
3) 将数据从 Channel 读到 Buffer 中：&lt;code&gt;fc.read( buffer );&lt;/code&gt;&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;写入文件&lt;br /&gt;
在 NIO 中写入文件类似于从文件中读取。首先从 FileOutputStream 获取一个通道：&lt;code&gt;
FileOutputStream fout = new FileOutputStream( &quot;writesomebytes.txt&quot; );
FileChannel fc = fout.getChannel();&lt;/code&gt;&lt;br /&gt;
下一步是创建一个缓冲区并在其中放入一些数据,
&lt;code&gt;ByteBuffer buffer = ByteBuffer.allocate( 1024 );
buffer.put(&quot;info&quot;);
buffer.flip();&lt;/code&gt;&lt;br /&gt;
最后一步是写入缓冲区中：
&lt;code&gt;fc.write( buffer );&lt;/code&gt;  &lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;读写结合&lt;br /&gt;
clear() 方法重设缓冲区，使它可以接受读入的数据。
它将 limit 设置为与 capacity 相同。
它设置 position 为 0。这个操作相当于复位。&lt;br /&gt;
flip() 方法让缓冲区可以将新读入的数据写入另一个通道。
它将 limit 设置为当前 position。
它将 position 设置为 0。&lt;br /&gt;
下面的内部循环概括了使用缓冲区将数据从输入通道拷贝到输出通道的过程。&lt;/p&gt;
  &lt;/li&gt;
&lt;/ol&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-java&quot; data-lang=&quot;java&quot;&gt;&lt;span class=&quot;k&quot;&gt;while&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kc&quot;&gt;true&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
     &lt;span class=&quot;n&quot;&gt;buffer&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;clear&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;();&lt;/span&gt;
     &lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;r&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;fcin&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;read&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;buffer&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;

     &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;r&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;==-&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
       &lt;span class=&quot;k&quot;&gt;break&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
     &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;

     &lt;span class=&quot;n&quot;&gt;buffer&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;flip&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;();&lt;/span&gt;
     &lt;span class=&quot;n&quot;&gt;fcout&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;write&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;buffer&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;read() 和 write() 调用得到了极大的简化，因为许多工作细节都由缓冲区完成了。 
clear() 和 flip() 方法用于让缓冲区在读和写之间切换。  &lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;
    &lt;p&gt;缓冲区内部细节&lt;br /&gt;
1)状态变量：position 变量跟踪已经写了多少数据。更准确地说，它指定了下一个字节将放到数组的哪一个元素中。
limit 变量表明还有多少数据需要取出(在从缓冲区写入通道时)，或者还有多少空间可以放入数据(在从通道读入缓冲区时)。
position 总是小于或者等于 limit。缓冲区的 capacity 表明可以储存在缓冲区中的最大数据容量。
实际上，它指定了底层数组的大小 ― 或者至少是指定了准许我们使用的底层数组的容量。
limit 决不能大于 capacity。&lt;br /&gt;
2)缓冲区分配和包装:&lt;br /&gt;
在能够读和写之前，必须有一个缓冲区。要创建缓冲区，您必须 分配 它。我们使用静态方法 allocate() 来分配缓冲区：
&lt;code&gt;ByteBuffer buffer = ByteBuffer.allocate( 1024 );&lt;/code&gt;
allocate() 方法分配一个具有指定大小的底层数组，并将它包装到一个缓冲区对象中 ― 在本例中是一个 ByteBuffer。
您还可以将一个现有的数组转换为缓冲区，如下所示：
&lt;code&gt;byte array[] = new byte[1024];
ByteBuffer buffer = ByteBuffer.wrap( array );&lt;/code&gt;
本例使用了 wrap() 方法将一个数组包装为缓冲区。必须非常小心地进行这类操作。一旦完成包装，底层数据就可以通过缓冲区或者直接访问。&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;异步 I/O&lt;br /&gt;
异步 I/O 是一种 没有阻塞地 读写数据的方法。通常，在代码进行 read() 调用时，代码会阻塞直至有可供读取的数据。
同样， write() 调用将会阻塞直至数据能够写入。另一方面，异步 I/O 调用不会阻塞。
相反，您将注册对特定 I/O 事件的兴趣 ― 可读的数据的到达、新的套接字连接，等等，而在发生这样的事件时，系统将会告诉您。
异步 I/O 的一个优势在于，它允许您同时根据大量的输入和输出执行 I/O。
同步程序常常要求助于轮询，或者创建许许多多的线程以处理大量的连接。
使用异步 I/O，您可以监听任何数量的通道上的事件，不用轮询，也不用额外的线程。&lt;br /&gt;
异步 I/O 中的核心对象名为 Selector。Selector 就是您注册对各种 I/O 事件的兴趣的地方，
而且当那些事件发生时，就是这个对象告诉您所发生的事件。所以，我们需要做的第一件事就是创建一个 Selector：
&lt;code&gt;Selector selector = Selector.open();&lt;/code&gt;
然后，我们将对不同的通道对象调用 register() 方法，以便注册我们对这些对象中发生的 I/O 事件的兴趣。
register() 的第一个参数总是这个 Selector。&lt;br /&gt;
参考：&lt;a href=&quot;http://www.ibm.com/developerworks/cn/education/java/j-nio/index.html&quot; target=&quot;_blank&quot;&gt;IBM&lt;/a&gt;  &lt;/p&gt;
  &lt;/li&gt;
&lt;/ol&gt;
</description>
                <link>http://shellbye.com/blog/tech_world/java_io_nio/</link>
                <guid>http://shellbye.com/blog/tech_world/java_io_nio</guid>
                <pubDate>Sun, 20 Sep 2015 21:57:08 +0800</pubDate>
        </item>

        <item>
                <title>Sort conclude 排序总结</title>
                <description>&lt;h3 id=&quot;section&quot;&gt;稳定性&lt;/h3&gt;
&lt;p&gt;算法的稳定性指的在排序后的序列和原始序列相比，关键字相同的元素的位置是否会发生变化，
若不变，则算法是稳定的，反之则不稳定。&lt;br /&gt;
稳定的算法：&lt;br /&gt;
低级算法（平均时间复杂度O(n*n)）基本都稳定:冒泡排序，简单选择排序，直接插入排序；&lt;br /&gt;
高级算法（平均时间复杂度O(nlgn)）中,只有归并排序是稳定的。&lt;br /&gt;
不稳定的算法：&lt;br /&gt;
都是高级算法：希尔排序，堆排序，快速排序。  &lt;/p&gt;

&lt;h3 id=&quot;section-1&quot;&gt;时间复杂度&lt;/h3&gt;
&lt;p&gt;============平均情况=========最好情况===最坏情况&lt;br /&gt;
冒泡排序======O(n&lt;em&gt;n)=========O(n)======O(n&lt;/em&gt;n)&lt;br /&gt;
简单选择排序===O(n&lt;em&gt;n)=========O(n&lt;/em&gt;n)====O(n&lt;em&gt;n)&lt;br /&gt;
直接插入排序===O(n&lt;/em&gt;n)=========O(n)======O(n&lt;em&gt;n)&lt;br /&gt;
希尔排序======O(nlgn)~O(n&lt;/em&gt;n)==O(n^1.3)==O(n&lt;em&gt;n)&lt;br /&gt;
堆排序========O(nlgn)========O(nlgn)===O(nlgn)&lt;br /&gt;
归并排序=======O(nlgn)========O(nlgn)===O(nlgn)&lt;br /&gt;
快速排序=======O(nlgn)========O(nlgn)===O(n&lt;/em&gt;n)  &lt;/p&gt;

&lt;h3 id=&quot;section-2&quot;&gt;空间复杂度&lt;/h3&gt;
&lt;p&gt;归并排序：O(n),快速排序：O(lgn)~O(n)&lt;br /&gt;
其他都是原地排序，只需要O(1).&lt;/p&gt;
</description>
                <link>http://shellbye.com/blog/tech_world/sort_conclude/</link>
                <guid>http://shellbye.com/blog/tech_world/sort_conclude</guid>
                <pubDate>Tue, 15 Sep 2015 20:57:08 +0800</pubDate>
        </item>

        <item>
                <title>Heap sort 堆排序</title>
                <description>&lt;p&gt;堆排序可以分为构造堆和排序输出两个阶段。在构造堆的过程中，将原始数组重新组织安排进一个堆中，
然后从这个堆中依次输出最大或最小元素，即可得到排序结果。  &lt;/p&gt;

&lt;h3 id=&quot;section&quot;&gt;构造堆&lt;/h3&gt;
&lt;p&gt;构造堆有由上自下和由下自上两种构造方法。由下自上的构造主要用于以下情况，
即堆的有序状态被破坏是因为某个结点变得比它的父节点要大时，此时就要交换当前结点与其父节点。
由上自下的构造则是用于以下情况，堆的有序状态被破坏是因为某个结点变得比他的子节点小的情况下，
此时需要将它与它的较大的子节点交换（之所以选较大的，是因为该结点要成为新的父节点，
所以不能随便选，要选择那个较大的）。&lt;/p&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-java&quot; data-lang=&quot;java&quot;&gt;&lt;span class=&quot;kd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;static&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;HeapSort&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;List&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Integer&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;list&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
	&lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;len&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;list&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;size&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
	&lt;span class=&quot;c1&quot;&gt;// construct the big head heap&lt;/span&gt;
	&lt;span class=&quot;k&quot;&gt;for&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;k&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;len&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;/&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;2&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;k&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;k&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;--){&lt;/span&gt;
		&lt;span class=&quot;n&quot;&gt;sink&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;list&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;k&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;len&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;
	&lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
	&lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;to_be_outputted_len&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;len&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
	&lt;span class=&quot;k&quot;&gt;while&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;to_be_outputted_len&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
		&lt;span class=&quot;n&quot;&gt;exchange&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;list&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;to_be_outputted_len&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;--);&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;// output current root&lt;/span&gt;
		&lt;span class=&quot;n&quot;&gt;sink&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;list&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;to_be_outputted_len&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;// sink the new root to where it fits&lt;/span&gt;
	&lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;

&lt;span class=&quot;kd&quot;&gt;private&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;static&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;sink&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;List&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Integer&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;list&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;k&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;n&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
	&lt;span class=&quot;k&quot;&gt;while&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;2&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;k&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;n&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
		&lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;i&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;2&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;*&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;k&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
		&lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;i&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;n&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;amp;&amp;amp;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;less&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;list&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;i&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;i&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)){&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;// find the bigger child node&lt;/span&gt;
			&lt;span class=&quot;n&quot;&gt;i&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;++;&lt;/span&gt;
		&lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
		&lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;(!&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;less&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;list&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;k&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;i&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)){&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;// already reach where it fits&lt;/span&gt;
			&lt;span class=&quot;k&quot;&gt;break&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
		&lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
		&lt;span class=&quot;n&quot;&gt;exchange&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;list&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;i&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;k&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;
		&lt;span class=&quot;n&quot;&gt;k&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;i&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
	&lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;为了能够简单方便的计算堆的子结点（2i，2i+1）和其父节点（i/2），在测试数据中，
第0位就不会使用了，而是直接从第一位开始。所以在第一个for循环中，k是从第一个有孩子的节点开始。
k的退出条件就是&lt;code&gt;k&amp;gt;0&lt;/code&gt;，即最后一个处理的元素是索引为1的元素，它将下沉到它应该位于的位置中。
在排序时&lt;code&gt;while&lt;/code&gt;中，退出条件则是&lt;code&gt;len &amp;gt; 1&lt;/code&gt;，即最后交换的是倒数第二个元素和它前面的元素，
即倒数第一个元素。之所以与上面的for中不一样，是因为for中是当前元素在与其后面的元素比较、交换，
而在while中，则是当前元素与其前面的元素比较、交换。&lt;br /&gt;
在&lt;code&gt;sink&lt;/code&gt;中，由于是大元素下沉，所以while的判断条件是当前元素的子元素2*k是否超过此次下沉的边界。
同样的，循环条件的改变也就是k不断地通过k=i扩大。需要额外注意的是内部寻找较大孩子节点时，
一定要判断下i与n的大小关系，否则在比较大小时i+1就会越界。第二个if用来判断是否还需要继续循环，
若当前节点已经大于其子元素，那么就不需要继续循环，直接退出即可。  &lt;/p&gt;

&lt;h3 id=&quot;section-1&quot;&gt;关于堆&lt;/h3&gt;
&lt;p&gt;通过一段时间的复习，我似乎渐渐明白为啥java用堆来管理内存了。首先堆是一种特殊的树，
它满足这样的条件：&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;该树的每一个节点都大于（小于）等于它的任意子节点。
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;堆是一种很高效的数据结构。为什么说它高效呢，我们都知道数组与链表的优劣，
数组访问很快，但是插入删除很慢；链表是插入删除很快，但是访问很慢；那么，
有没有折中的方案呢？堆就是这个折中的方案。因为它的有序性，它的访问要快过链表；
又因为它本身是链表结构的，所以它的插入和删除又比数组要快，
而且不需要大量的移动元素。我觉得这可能就是java虚拟机使用堆来管理内存的原因吧。&lt;/p&gt;
</description>
                <link>http://shellbye.com/blog/tech_world/heap_sort/</link>
                <guid>http://shellbye.com/blog/tech_world/heap_sort</guid>
                <pubDate>Mon, 14 Sep 2015 00:57:08 +0800</pubDate>
        </item>

        <item>
                <title>Merge and Quick sort 归并排序与快速排序</title>
                <description>&lt;h3 id=&quot;section&quot;&gt;归并排序&lt;/h3&gt;
&lt;p&gt;归并排序与其他简单排序的不同之处在于它用到了分治思想。即把一个大的问题分解为一个个小的问题。
通过求解小问题来解决大问题。在归并排序中，分治体现在它是先把一个个小的序列排好，
然后在将这些排好的小序列合并起来。归并的代码也用到了一个辅助辅助函数，
基本上高级的排序方法都会有自己的辅助函数。具体代码如下：&lt;/p&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-java&quot; data-lang=&quot;java&quot;&gt;&lt;span class=&quot;kd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;static&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;MergeSort&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;List&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Integer&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;list&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;low&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;high&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
	&lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;high&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;low&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;
		&lt;span class=&quot;k&quot;&gt;return&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
	&lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;mid&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;low&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;high&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;/&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;2&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
	&lt;span class=&quot;n&quot;&gt;MergeSort&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;list&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;low&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;mid&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;
	&lt;span class=&quot;n&quot;&gt;MergeSort&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;list&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;mid&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;+&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;high&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;
	&lt;span class=&quot;n&quot;&gt;merge&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;list&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;low&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;mid&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;high&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;

&lt;span class=&quot;kd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;static&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;merge&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;List&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Integer&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;list&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;low&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;mid&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;high&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
	&lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;[]&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;aux&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;list&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;size&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;()];&lt;/span&gt;
	&lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;i&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;low&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;j&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;mid&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
	&lt;span class=&quot;k&quot;&gt;for&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;k&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;low&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;k&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;high&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;k&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;++)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
		&lt;span class=&quot;n&quot;&gt;aux&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;k&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;list&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;get&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;k&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;
	&lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;

	&lt;span class=&quot;k&quot;&gt;for&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;k&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;low&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;k&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;high&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;k&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;++)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
		&lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;i&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;mid&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
			&lt;span class=&quot;c1&quot;&gt;// 左边用完&lt;/span&gt;
			&lt;span class=&quot;n&quot;&gt;list&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;set&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;k&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;aux&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;j&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;++]);&lt;/span&gt;
		&lt;span class=&quot;o&quot;&gt;}&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;else&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;j&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;high&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
			&lt;span class=&quot;c1&quot;&gt;// 右边用完&lt;/span&gt;
			&lt;span class=&quot;n&quot;&gt;list&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;set&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;k&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;aux&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;i&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;++]);&lt;/span&gt;
		&lt;span class=&quot;o&quot;&gt;}&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;else&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;aux&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;j&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;aux&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;i&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;])&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
			&lt;span class=&quot;c1&quot;&gt;// j对应的较小,先放j,然后j后移&lt;/span&gt;
			&lt;span class=&quot;n&quot;&gt;list&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;set&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;k&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;aux&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;j&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;++]);&lt;/span&gt;
		&lt;span class=&quot;o&quot;&gt;}&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;else&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
			&lt;span class=&quot;n&quot;&gt;list&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;set&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;k&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;aux&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;i&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;++]);&lt;/span&gt;
		&lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
	&lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;首先需要注意等是在&lt;code&gt;merge&lt;/code&gt;中，对list进行备份时，并不是全部备份，而是从low到high的一个局部备份。
然后在for循环里面，i和j都是累加，i是从low开始往mid走，j是从mid+1开始往high走，
它们的终止条件都是小于目的位置。然后每次放置完哪个，哪个就要向后移动。&lt;br /&gt;
还有就是递归的程序需要注意的一点就是退出条件，在归并排序中，就是&lt;code&gt;MergeSort&lt;/code&gt;中的前两行代码。&lt;/p&gt;

&lt;h3 id=&quot;section-1&quot;&gt;快速排序&lt;/h3&gt;
&lt;p&gt;一个排序算法得有多快才能让它的名字就叫做快速排序呢？
可以参考这篇文章来看看&lt;a href=&quot;http://mindhacks.cn/2008/06/13/why-is-quicksort-so-quick/&quot; target=&quot;blank&quot;&gt;快排为什么那样快&lt;/a&gt;。
快排也是分治的算法，与归并不同的是，快排是先分割，然后排序。而归并是先排序，然后归并，提现在代码上就是sort方法的位置：&lt;/p&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-java&quot; data-lang=&quot;java&quot;&gt;&lt;span class=&quot;kd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;static&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;QuickSort&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;List&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Integer&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;list&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;low&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;high&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
	&lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;low&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;high&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;
		&lt;span class=&quot;k&quot;&gt;return&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
	&lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;mid&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;partition&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;list&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;low&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;high&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;
	&lt;span class=&quot;n&quot;&gt;QuickSort&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;list&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;low&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;mid&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;
	&lt;span class=&quot;n&quot;&gt;QuickSort&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;list&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;mid&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;high&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;

&lt;span class=&quot;kd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;static&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;partition&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;List&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Integer&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;list&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;low&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;high&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
	&lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;i&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;low&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;j&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;high&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
	&lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;value&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;list&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;get&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;low&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;
	&lt;span class=&quot;k&quot;&gt;while&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kc&quot;&gt;true&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
		&lt;span class=&quot;k&quot;&gt;while&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;list&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;get&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(++&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;i&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;value&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
			&lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;i&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;==&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;high&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;
				&lt;span class=&quot;k&quot;&gt;break&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
		&lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
		&lt;span class=&quot;k&quot;&gt;while&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;list&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;get&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(--&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;j&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;value&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
			&lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;j&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;==&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;low&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;
				&lt;span class=&quot;k&quot;&gt;break&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
		&lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
		&lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;i&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;j&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;
			&lt;span class=&quot;k&quot;&gt;break&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
		&lt;span class=&quot;n&quot;&gt;exchange&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;list&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;i&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;j&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;
	&lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
	&lt;span class=&quot;n&quot;&gt;exchange&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;list&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;low&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;j&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;
	&lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;j&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;快排需要注意有内层的两个&lt;code&gt;while&lt;/code&gt;循环和进入partition之后的&lt;code&gt;high + 1&lt;/code&gt;，这里之所以需要加一，
是因为在内层的两个循环之中，是先减一之后才进行的比较。
快排的重点是&lt;code&gt;partition&lt;/code&gt;函数，在内部的两个&lt;code&gt;while&lt;/code&gt;循环中，是分别从前往后找比&lt;code&gt;value&lt;/code&gt;大的，
和从后往前找比&lt;code&gt;value&lt;/code&gt;小的，然后交换他们。之前在数据结构课上，每一个&lt;code&gt;while&lt;/code&gt;循环之后，
都要&lt;code&gt;exchang&lt;/code&gt;，但是这种方法显然没有上面的代码的简洁且高效，因为它只有一次交换操作。
现在回过头来想，教科书里的两次交换真的没有意义多此一举。  &lt;/p&gt;
</description>
                <link>http://shellbye.com/blog/tech_world/merge_quick_sort/</link>
                <guid>http://shellbye.com/blog/tech_world/merge_quick_sort</guid>
                <pubDate>Sun, 13 Sep 2015 21:57:08 +0800</pubDate>
        </item>


</channel>
</rss>
